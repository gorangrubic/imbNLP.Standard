<?xml version="1.0"?>
<doc>
    <assembly>
        <name>imbNLP.PartOfSpeech</name>
    </assembly>
    <members>
        <member name="T:imbNLP.PartOfSpeech.analysis.NamespaceDoc">
            <summary>
            <para>Tools and structures for word similarity assesment.</para>
            </summary>
            <remarks>
            <para>For high volume computation use <see cref="T:imbNLP.PartOfSpeech.analysis.wordSimilarityComponent"/>. For low intentsity computation (word against word), the best option is to use <see cref="M:imbNLP.PartOfSpeech.analysis.wordAnalysisTools.GetSimilarity(System.String,System.String,imbNLP.PartOfSpeech.analysis.nGramsSimilarityEquationEnum,System.Int32,imbNLP.PartOfSpeech.analysis.nGramsModeEnum)"/> universal method</para>
            </remarks>
        </member>
        <member name="T:imbNLP.PartOfSpeech.analysis.nGramsModeEnum">
            <summary>
            Mode of word decomposition
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.analysis.nGramsModeEnum.overlap">
            <summary>
            The overlap mode: e.g. for "category", N=2 it will produce: ca, at, te, eg, go, or, ry
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.analysis.nGramsModeEnum.ordinal">
            <summary>
            The ordinal mode: e.g. for "category", N=2 it will produce: ca, te, go, ry
            </summary>
        </member>
        <member name="T:imbNLP.PartOfSpeech.analysis.nGramsSimilarityEquationEnum">
            <summary>
            Equation to use for word to word similarity assesment
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.analysis.nGramsSimilarityEquationEnum.JaccardIndex">
            <summary>
            The Jaccard Index: <see cref="M:imbNLP.PartOfSpeech.analysis.wordAnalysisTools.GetJaccardIndex(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})"/>
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.analysis.nGramsSimilarityEquationEnum.DiceCoefficient">
            <summary>
            The dice coefficient: <see cref="M:imbNLP.PartOfSpeech.analysis.wordAnalysisTools.GetDiceCoefficient(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})"/>
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.analysis.nGramsSimilarityEquationEnum.continualOverlapRatio">
            <summary>
            The get continual overlap ratio: <see cref="M:imbNLP.PartOfSpeech.analysis.wordAnalysisTools.GetContinualOverlapRatio(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})"/>
            </summary>
        </member>
        <member name="T:imbNLP.PartOfSpeech.analysis.wordAnalysisTools">
            <summary>
            Static methods for word similarity computation (works with any string)
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.analysis.wordAnalysisTools.GetSimilarity(System.String,System.String,imbNLP.PartOfSpeech.analysis.nGramsSimilarityEquationEnum,System.Int32,imbNLP.PartOfSpeech.analysis.nGramsModeEnum)">
            <summary>
            Computes word similarity
            </summary>
            <param name="wordA">The word a.</param>
            <param name="wordB">The word b.</param>
            <param name="equationEnum">The equation enum.</param>
            <param name="nGramSize">Size of the n gram.</param>
            <param name="nGramMode">The n gram mode.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.analysis.wordAnalysisTools.GetContinualOverlapRatio(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Ratio describes % of uninteruppted n-grams overlap. Example:  "elektromotorni", "motorski" = 5 / 14
            </summary>
            <param name="ngrams_A">The ngrams a.</param>
            <param name="ngrams_b">The ngrams b.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.analysis.wordAnalysisTools.getContinualOverlapR(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Gets the continual overlap r.
            </summary>
            <param name="A">a.</param>
            <param name="B">The b.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.analysis.wordAnalysisTools.GetJaccardIndex(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Gets the index of the Jaccard index: number of common ngrams divided by number of total unique ngrams
            </summary>
            <param name="ngrams_A">The ngrams a.</param>
            <param name="ngrams_b">The ngrams b.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.analysis.wordAnalysisTools.GetDiceCoefficient(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Gets the index of the Dice coefficient: number of common ngrams divided by number of n-grams in both sets
            </summary>
            <param name="ngrams_A">The ngrams a.</param>
            <param name="ngrams_b">The ngrams b.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.analysis.wordAnalysisTools.getNGramsDescriptiveLine(System.String,System.Int32,imbNLP.PartOfSpeech.analysis.nGramsModeEnum)">
            <summary>
            Gets descriptive line about n-grams deconstruction of the specified word
            </summary>
            <param name="word">The word to be splitted into n-grams</param>
            <param name="N">Size of N-grams, e.g. for bigrams: N=2</param>
            <param name="mode">The slicing mode</param>
            <returns>Line used for debugging </returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.analysis.wordAnalysisTools.getNGrams(System.String,System.Int32,imbNLP.PartOfSpeech.analysis.nGramsModeEnum)">
            <summary>
            Breaks the specified word into <c>N</c>-grams
            </summary>
            <param name="word">The word to be splitted into n-grams</param>
            <param name="N">Size of N-grams, e.g. for bigrams: N=2</param>
            <param name="mode">The slicing mode</param>
            <returns>Set of NGrams</returns>
        </member>
        <member name="T:imbNLP.PartOfSpeech.analysis.wordSimilarityComponent">
            <summary>
            Performs word similarity computation and holds settings (serializable)
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.analysis.wordSimilarityComponent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbNLP.PartOfSpeech.analysis.wordSimilarityComponent"/> class.
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.analysis.wordSimilarityComponent.GetResult(System.String,System.String)">
            <summary>
            Gets the similarity coeficient from 0 to 1
            </summary>
            <param name="wordA">The word a.</param>
            <param name="wordB">The word b.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.analysis.wordSimilarityComponent.GetResult(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Computes similarity (using: <see cref="P:imbNLP.PartOfSpeech.analysis.wordSimilarityComponent.equation" />) of the specified words and returns pairs above the <see cref="P:imbNLP.PartOfSpeech.analysis.wordSimilarityComponent.treshold" /></summary>
            <param name="wordsToAnalyse">Set of words to analyse.</param>
            <returns>
            Sorted collection of pairs that had same or greater score then <see cref="P:imbNLP.PartOfSpeech.analysis.wordSimilarityComponent.treshold" /></returns>
        </member>
        <member name="P:imbNLP.PartOfSpeech.analysis.wordSimilarityComponent.treshold">
            <summary>
            Gets or sets the output treshold.
            </summary>
            <value>
            The output treshold.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.analysis.wordSimilarityComponent.N">
            <summary>
            Gets or sets the n.
            </summary>
            <value>
            The n.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.analysis.wordSimilarityComponent.equation">
            <summary>
            Gets or sets the equation.
            </summary>
            <value>
            The equation.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.analysis.wordSimilarityComponent.gramConstruction">
            <summary>
            Gets or sets the gram construction.
            </summary>
            <value>
            The gram construction.
            </value>
        </member>
        <member name="M:imbNLP.PartOfSpeech.analysis.wordSimilarityComponent.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:imbNLP.PartOfSpeech.analysis.wordSimilarityPair">
            <summary>
            Represents one pair of similar words
            </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.analysis.wordSimilarityPair.wordA">
            <summary>
            Gets or sets the word a.
            </summary>
            <value>
            The word a.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.analysis.wordSimilarityPair.wordB">
            <summary>
            Gets or sets the word b.
            </summary>
            <value>
            The word b.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.analysis.wordSimilarityPair.score">
            <summary>
            Similarity score
            </summary>
            <value>
            The score.
            </value>
        </member>
        <member name="M:imbNLP.PartOfSpeech.analysis.wordSimilarityPair.#ctor(System.String,System.String,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:imbNLP.PartOfSpeech.analysis.wordSimilarityPair"/> class.
            </summary>
            <param name="_wordA">The word a.</param>
            <param name="_wordB">The word b.</param>
            <param name="_score">The score.</param>
        </member>
        <member name="M:imbNLP.PartOfSpeech.analysis.wordSimilarityPair.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbNLP.PartOfSpeech.analysis.wordSimilarityPair"/> class.
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.analysis.wordSimilarityPair.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:imbNLP.PartOfSpeech.analysis.wordSimilarityResultSet">
            <summary>
            Collection of similar words that is returned from <see cref="!:wordSimilarityComponent.GetResult(List&lt;string&gt;)"/> call;
            </summary>
            <seealso cref="!:System.Collections.Generic.List&lt;imbNLP.PartOfSpeech.analysis.wordSimilarityPair&gt;" />
        </member>
        <member name="M:imbNLP.PartOfSpeech.analysis.wordSimilarityResultSet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbNLP.PartOfSpeech.analysis.wordSimilarityResultSet"/> class.
            </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.analysis.wordSimilarityResultSet.component">
            <summary>
            Reference to the component that produced this result set
            </summary>
            <value>
            The component.
            </value>
        </member>
        <member name="M:imbNLP.PartOfSpeech.analysis.wordSimilarityResultSet.ToString">
            <summary>
            Returns textual description of the result
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:imbNLP.PartOfSpeech.decomposing.block.blockComposerSM">
            <summary>
            SM-Crawler model of page to block decomposition
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.decomposing.block.IBlockComposer.process(HtmlAgilityPack.HtmlDocument,System.String)">
            <summary>
            Processes the specified HTML.
            </summary>
            <param name="html">The HTML document</param>
            <param name="name">The name - name for the nodeTree root node</param>
            <returns></returns>
        </member>
        <member name="T:imbNLP.PartOfSpeech.decomposing.chunk.chunkComposerBasic">
             <summary>
            
             </summary>
             <seealso cref="!:imbNLP.PartOfSpeech.pipeline.postprocessor.pipelinePostprocessBase&lt;imbNLP.PartOfSpeech.pipelineForPos.subject.pipelineTaskSubjectContentToken, imbNLP.PartOfSpeech.decomposing.chunk.chunkComposerBasicSettings&gt;" />
        </member>
        <member name="M:imbNLP.PartOfSpeech.decomposing.chunk.chunkComposerBasic.DescribeSelf">
            <summary>
            Creates multi-line description of current configuration
            </summary>
            <returns>List of description lines</returns>
        </member>
        <member name="T:imbNLP.PartOfSpeech.decomposing.chunk.chunkComposerBasicSettings">
             <summary>
            
             </summary>
             <seealso cref="T:imbNLP.PartOfSpeech.pipeline.postprocessor.pipelinePostprocessSettings" />
        </member>
        <member name="P:imbNLP.PartOfSpeech.decomposing.chunk.chunkComposerBasicSettings.doCheckGramTagCriteria">
            <summary> If true it will use gram tag criteria for chunk creation </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.decomposing.chunk.chunkComposerBasicSettings.DescribeSelf">
            <summary>
            Creates multi-line description of current configuration
            </summary>
            <returns>List of description lines</returns>
        </member>
        <member name="P:imbNLP.PartOfSpeech.decomposing.chunk.chunkComposerBasicSettings.pos_enum_types">
            <summary>
            Locally used dictionary of pos enums
            </summary>
            <value>
            The position enum types.
            </value>
        </member>
        <member name="T:imbNLP.PartOfSpeech.decomposing.chunk.chunkMatchRule">
            <summary>
            Singe regex-based rule to build part-of-speech quring using different <see cref="!:imbMCTokenStream"/> renderings
            </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.decomposing.chunk.chunkMatchRule.flagTypesToMatchNames">
            <summary>
            Names of enumeration types whose values have to match in order to confirm prior regex match
            </summary>
            <value>
            The flag types to match names.
            </value>
        </member>
        <member name="M:imbNLP.PartOfSpeech.decomposing.chunk.chunkMatchRuleSet.DescribeSelf">
            <summary>
            Describes its rules
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.decomposing.html.tools.GetTextualExtract(imbMiningContext.MCWebPage.imbMCWebPage)">
            <summary>
            Gets the textual extract.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.decomposing.html.tools.GetUniquePages(System.Collections.Generic.IEnumerable{imbMiningContext.MCWebPage.imbMCWebPage})">
            <summary>
            Gets the unique pages.
            </summary>
            <param name="source">The source.</param>
            <param name="orderBySize">if set to <c>true</c> [order by size].</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.decomposing.html.tools.GetTagNames(HtmlAgilityPack.HtmlNode,System.Int32)">
            <summary>
            Gets the tag and its parent nodes names, until the limit is reached
            </summary>
            <param name="node">The node.</param>
            <param name="limit">The limit.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.decomposing.html.tools.isTagAcceptable(HtmlAgilityPack.HtmlNode,imbCommonModels.structure.node,System.Boolean,System.Boolean)">
            <summary>
            Da li je ovaj Tag dozvoljen?
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="F:imbNLP.PartOfSpeech.decomposing.html.tools._select_sentenceTerminator">
            <summary>
            Regex select sentenceTerminator : ([\.;!\?]+)$
            </summary>
            <remarks>
            <para>Selektuje karaktere koji predstavljaju kraj recenice</para>
            <para></para>
            </remarks>
        </member>
        <member name="F:imbNLP.PartOfSpeech.decomposing.html.tools._select_sentenceSpliter">
            <summary>
            Regex select sentenceSpliter : (?=[\.;!\?])\s*(?=[A-ZČŠĆŽĐ\d])
            </summary>
            <remarks>
            <para>For text: example text</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="M:imbNLP.PartOfSpeech.decomposing.html.tools.splitContentToSentences(System.String)">
            <summary>
            Interni algoritam za razbijanje na recenice
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.decomposing.html.tools.buildTree(HtmlAgilityPack.HtmlDocument,System.String,System.Boolean,System.Boolean)">
            <summary>
            Builds the content tree out of <see cref="T:HtmlAgilityPack.HtmlDocument"/>
            </summary>
            <param name="htmlDoc">The HTML document</param>
            <param name="__name">The name of the root</param>
            <returns></returns>
        </member>
        <member name="T:imbNLP.PartOfSpeech.decomposing.stream.streamComposerBasic">
            <summary>
            Decomposes a block into streams
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.decomposing.stream.streamComposerBasic.process(imbMiningContext.MCDocumentStructure.imbMCBlock)">
            <summary>
            Processes the specified block.
            </summary>
            <param name="block">The block.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.decomposing.token.tokenComposerBasic.process(imbMiningContext.MCDocumentStructure.imbMCStream)">
            <summary>
            Processes the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:imbNLP.PartOfSpeech.evaluation.termTruthTable.NamespaceDoc" -->
        <member name="T:imbNLP.PartOfSpeech.evaluation.termTruthTable.termQualification">
            <summary>
            Entry for term qualification
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.evaluation.termTruthTable.termQualification.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbNLP.PartOfSpeech.evaluation.termTruthTable.termQualification"/> class.
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.evaluation.termTruthTable.termQualification.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:imbNLP.PartOfSpeech.evaluation.termTruthTable.termQualification"/> class.
            </summary>
            <param name="_lemmaForm">The lemma form.</param>
            <param name="_score">The score.</param>
        </member>
        <member name="P:imbNLP.PartOfSpeech.evaluation.termTruthTable.termQualification.lemmaForm">
            <summary>
            Gets or sets the lemma form.
            </summary>
            <value>
            The lemma form.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.evaluation.termTruthTable.termQualification.score">
            <summary>
            Gets or sets the score.
            </summary>
            <value>
            The score.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.evaluation.termTruthTable.termQualification.translatedForm">
            <summary>
            Gets or sets the lemma form.
            </summary>
            <value>
            The lemma form.
            </value>
        </member>
        <member name="F:imbNLP.PartOfSpeech.evaluation.termTruthTable.termQualification.FORMAT">
            <summary>
            The format
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.evaluation.termTruthTable.termQualification.op_Implicit(System.String)~imbNLP.PartOfSpeech.evaluation.termTruthTable.termQualification">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:imbNLP.PartOfSpeech.evaluation.termTruthTable.termQualification"/>.
            </summary>
            <param name="input">The input.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.evaluation.termTruthTable.termQualification.op_Implicit(imbNLP.PartOfSpeech.evaluation.termTruthTable.termQualification)~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:imbNLP.PartOfSpeech.evaluation.termTruthTable.termQualification"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="input">The input.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.evaluation.termTruthTable.termQualification.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.evaluation.termTruthTable.termQualification.FromString(System.String)">
            <summary>
            From the string.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="T:imbNLP.PartOfSpeech.evaluation.termTruthTable.termQualificationAnswer">
            <summary>
            Response or value association, for a <see cref="T:imbNLP.PartOfSpeech.evaluation.termTruthTable.termQualification"/>
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.evaluation.termTruthTable.termQualificationAnswer.irrelevant">
            <summary>
            The term is irrelevant, for both approaches
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.evaluation.termTruthTable.termQualificationAnswer.neutral">
            <summary>
            The term is not accepted, nor denied
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.evaluation.termTruthTable.termQualificationAnswer.inclusive">
            <summary>
            The term is inclusivly acceptable, but not in exclusive approach
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.evaluation.termTruthTable.termQualificationAnswer.exclusive">
            <summary>
            The term is suitable in exclusive sense, making it acceptable in inclusive too
            </summary>
        </member>
        <member name="T:imbNLP.PartOfSpeech.evaluation.termTruthTable.termQualificationComponent">
            <summary>
            Term qualification component
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.evaluation.termTruthTable.termQualificationComponent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbNLP.PartOfSpeech.evaluation.termTruthTable.termQualificationComponent"/> class.
            </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.evaluation.termTruthTable.termQualificationComponent.treshold">
            <summary>
            Gets or sets the treshold, used for word similarity
            </summary>
            <value>
            The treshold.
            </value>
        </member>
        <member name="M:imbNLP.PartOfSpeech.evaluation.termTruthTable.termQualificationComponent.EvaluateToTerm(System.String,imbNLP.PartOfSpeech.evaluation.termTruthTable.termQualificationList)">
            <summary>
            Gets or makes neutral <see cref="T:imbNLP.PartOfSpeech.evaluation.termTruthTable.termQualification"/>
            </summary>
            <param name="word">The word to be evaluated.</param>
            <param name="list">The list with qualification definitions</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.evaluation.termTruthTable.termQualificationComponent.Evaluate(System.String,imbNLP.PartOfSpeech.evaluation.termTruthTable.termQualificationList)">
            <summary>
            Evaluates the specified word
            </summary>
            <param name="word">The word.</param>
            <param name="list">Qualification list</param>
            <returns></returns>
        </member>
        <member name="P:imbNLP.PartOfSpeech.evaluation.termTruthTable.termQualificationComponent.similarity">
            <summary>
            Settings for cloud waveing when <see cref="!:useSimilarity"/> is on
            </summary>
            <value>
            The similar words.
            </value>
        </member>
        <member name="T:imbNLP.PartOfSpeech.evaluation.termTruthTable.termQualificationList">
            <summary>
            List of <see cref="T:imbNLP.PartOfSpeech.evaluation.termTruthTable.termQualification"/>
            </summary>
            <seealso cref="!:System.Collections.Generic.List&lt;imbNLP.PartOfSpeech.evaluation.termTruthTable.termQualification&gt;" />
        </member>
        <member name="M:imbNLP.PartOfSpeech.evaluation.termTruthTable.termQualificationList.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.evaluation.termTruthTable.termQualificationList.FromString(System.String)">
            <summary>
            Populates the list from source string
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:imbNLP.PartOfSpeech.evaluation.termTruthTable.termQualificationList.Load(System.String)">
            <summary>
            Loads the specified path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:imbNLP.PartOfSpeech.evaluation.termTruthTable.termQualificationList.Save(System.String)">
            <summary>
            Saves the specified path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:imbNLP.PartOfSpeech.evaluation.termTruthTable.termQualificationList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbNLP.PartOfSpeech.evaluation.termTruthTable.termQualificationList"/> class.
            </summary>
        </member>
        <member name="T:imbNLP.PartOfSpeech.flags.basic.pos_adjectiveType">
            <summary>
            Adjective type, as used by multitext standard
            </summary>
        </member>
        <member name="T:imbNLP.PartOfSpeech.flags.basic.pos_adverbType">
            <summary>
            Adverb types - as used in multitext standard
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.basic.pos_animatness.v">
            <summary>
            The v - animate
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.basic.pos_animatness.q">
            <summary>
            The q - non-animate
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.basic.pos_animatness.g">
            <summary>
            The g - no consenquences
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.basic.pos_clitic.i">
            <summary>
            Clitic
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.basic.pos_clitic.r">
            <summary>
            No clitic
            </summary>
        </member>
        <member name="T:imbNLP.PartOfSpeech.flags.basic.pos_conjunctionFormation">
            <summary>
            Conjunction formation type, as used in multitext standard
            </summary>
        </member>
        <member name="T:imbNLP.PartOfSpeech.flags.basic.pos_conjunctionType">
            <summary>
            Conjunction type, as used in multitext standard
            </summary>
        </member>
        <member name="T:imbNLP.PartOfSpeech.flags.basic.pos_definitness">
            <summary>
            Adjective
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.basic.pos_definitness.d">
            <summary>
            Definite
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.basic.pos_definitness.k">
            <summary>
            Indefinite
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.basic.pos_degree.a">
            <summary>
            positive
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.basic.pos_degree.b">
            <summary>
            comparative
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.basic.pos_degree.c">
            <summary>
            superlative
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.basic.pos_gender.m">
            <summary>
            The masculine
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.basic.pos_gender.f">
            <summary>
            The femine
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.basic.pos_gender.n">
            <summary>
            The neutre
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.basic.pos_negation.h">
            <summary>
            negative clitic
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.basic.pos_negation.i">
            <summary>
            positive clitic
            </summary>
        </member>
        <member name="T:imbNLP.PartOfSpeech.flags.basic.pos_nounGroup">
            <summary>
            Morphologic group, it is not generally applicable
            </summary>
        </member>
        <member name="T:imbNLP.PartOfSpeech.flags.basic.pos_nounType">
            <summary>
            Noun type - used by multitext standard
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.basic.pos_number.s">
            <summary>
            The singular
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.basic.pos_number.p">
            <summary>
            The plural
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.basic.pos_number.w">
            <summary>
            The paukal
            </summary>
        </member>
        <member name="T:imbNLP.PartOfSpeech.flags.basic.pos_numeralForm">
            <summary>
            Numeral form, as used in multitext standard
            </summary>
        </member>
        <member name="T:imbNLP.PartOfSpeech.flags.basic.pos_numeralType">
            <summary>
            Numeral type, as used in multitext standard
            </summary>
        </member>
        <member name="T:imbNLP.PartOfSpeech.flags.basic.pos_particleType">
            <summary>
            Particle type, as used in multitext standard
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.basic.pos_person.x">
            <summary>
            First
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.basic.pos_person.y">
            <summary>
            Second
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.basic.pos_person.z">
            <summary>
            Thirst
            </summary>
        </member>
        <member name="T:imbNLP.PartOfSpeech.flags.basic.pos_pronounType">
            <summary>
            Pronoun type, as used in multitext standard
            </summary>
        </member>
        <member name="T:imbNLP.PartOfSpeech.flags.basic.pos_residualType">
            <summary>
            Residual type, as used in multitext standard
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.basic.pos_type.N">
            <summary>
            Noun
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.basic.pos_type.A">
            <summary>
            Adjective
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.basic.pos_type.V">
            <summary>
            Verb
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.basic.pos_type.PREP">
            <summary>
            The preposition, or adposition
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.basic.pos_type.PRO">
            <summary>
            Proverb
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.basic.pos_type.ABB">
            <summary>
            Adposition
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.basic.pos_type.RES">
            <summary>
            Residual
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.basic.pos_verbform.A">
            <summary>
            Aorist
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.basic.pos_verbform.P">
            <summary>
            Present
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.basic.pos_verbform.W">
            <summary>
            Infititive
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.basic.pos_verbform.I">
            <summary>
            Imperfect
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.basic.pos_verbform.Y">
            <summary>
            Imperative
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.basic.pos_verbform.G">
            <summary>
            Active PP
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.basic.pos_verbform.T">
            <summary>
            Pasive PP
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.basic.pos_verbform.F">
            <summary>
            Future
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.basic.pos_verbform.S">
            <summary>
            Present gerund
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.basic.pos_verbform.X">
            <summary>
            Part gerund
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.basic.pos_verbform.PARTICIPLE">
            <summary>
            The participle: alias for G, T, S and X
            </summary>
        </member>
        <member name="T:imbNLP.PartOfSpeech.flags.basic.pos_verbType">
            <summary>
            Verb type, as used in multitext specification
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.data.dat_emailType.personal">
            <summary>
            Personal> contains name and/or lastname
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.data.dat_emailType.publicService">
            <summary>
            The public service: like gmail, hotmail, yahoo etc
            </summary>
        </member>
        <member name="T:imbNLP.PartOfSpeech.flags.data.dat_generality">
            <summary>
            Describes generality as found by method of combined (2D) corpus analysis
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.data.dat_generality.particularOutsideDomain">
            <summary>
            The particular outside domain: y+,x-
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.data.dat_generality.particularInsideDomain">
            <summary>
            The particular inside domain: x-,y-
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.data.dat_generality.generalInsideDomain">
            <summary>
            The general inside domain: x+,y-
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.data.dat_generality.generalOutsideDomain">
            <summary>
            The general for web: x+,y+
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.data.dat_generality.totallyGeneralForDomain">
            <summary>
            The totally general for domain: x=1
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.data.dat_generality.totallyParticularForDomain">
            <summary>
            The totally particular for domain: x=0
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.data.dat_generality.totallyGeneralOutsideDomain">
            <summary>
            The totally general outside domain: y=1
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.data.dat_generality.totallyParticularOutsideDomain">
            <summary>
            The totally particular outside domain: y=0
            </summary>
        </member>
        <member name="T:imbNLP.PartOfSpeech.flags.data.dat_knownEntity">
            <summary>
            Flags for known entity that was recognized
            </summary>
        </member>
        <member name="T:imbNLP.PartOfSpeech.flags.data.dat_legalForm">
            <summary>
            Legal form of the organization
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.data.dat_legalForm.limited">
            <summary>
            The limited: limited liability, owner is not legaly bound to liabilities. LTD, doo
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.data.dat_legalForm.corporation">
            <summary>
            The corporation: ownership is splitted to stocks, traded or not traded on stock exchange: inc, ad
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.data.dat_legalForm.entherprise">
            <summary>
            The entherprise: full liability, owner is legaly bound to liabilities of the legal entity, sr, str
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.data.dat_legalForm.publicServiceCompany">
            <summary>
            The public service company: State owned company providing public services
            </summary>
        </member>
        <member name="T:imbNLP.PartOfSpeech.flags.data.dat_measure">
            <summary>
            Type of measure
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.data.dat_measure.pieces">
            <summary>
            The pieces: number of parts
            </summary>
        </member>
        <member name="T:imbNLP.PartOfSpeech.flags.data.dat_phoneType">
            <summary>
            Type of phone number
            </summary>
        </member>
        <member name="T:imbNLP.PartOfSpeech.flags.posFlagExtensions">
            <summary>
            POS Flags filtration extensions
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.flags.posFlagExtensions.getGrammarContext(imbNLP.PartOfSpeech.flags.basic.pos_type,System.Collections.Generic.List{System.Object})">
            <summary>
            Gets the grammar context flags: degree, gender, number, gramaticalCase, definitness, animatness, negation... everything that is not direct subtype flag.
            </summary>
            <param name="mainType">Main type flag.</param>
            <param name="graphTags">The graph tags to filter out</param>
            <returns>List of tags</returns>
            <seealso cref="M:imbNLP.PartOfSpeech.flags.posFlagExtensions.getSubTypes(imbNLP.PartOfSpeech.flags.basic.pos_type,System.Collections.Generic.List{System.Object})"/>
        </member>
        <member name="M:imbNLP.PartOfSpeech.flags.posFlagExtensions.getSubTypes(imbNLP.PartOfSpeech.flags.basic.pos_type,System.Collections.Generic.List{System.Object})">
            <summary>
            Gets the sub type flags from <c>graphTags</c>, for the <c>mainType</c> specified
            </summary>
            <param name="mainType">Type of the main.</param>
            <param name="graphTags">The graph tags.</param>
            <returns></returns>
        </member>
        <member name="T:imbNLP.PartOfSpeech.flags.token.cnt_blockRole">
            <summary>
            Role of the block, containing the <see cref="T:imbMiningContext.MCDocumentStructure.imbMCDocumentElement"/>
            </summary>
        </member>
        <member name="T:imbNLP.PartOfSpeech.flags.token.cnt_containerType">
            <summary>
            HTML DOM container
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.token.cnt_containerType.paragraph">
            <summary>
            The paragraph or other normal text container
            </summary>
        </member>
        <member name="T:imbNLP.PartOfSpeech.flags.token.cnt_level">
            <summary>
            Container level
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.token.cnt_level.mcRepo">
            <summary>
            The mc repo: set of site
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.token.cnt_level.mcSite">
            <summary>
            The mc site: set of pages
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.token.cnt_level.mcPage">
            <summary>
            The mc webpage:
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.token.cnt_level.mcBlock">
            <summary>
            The mc block: block with set of mcTokenStreams
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.token.cnt_level.mcTokenStream">
            <summary>
            The mc token stream: stream of tokens, not necessarily a sentence
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.token.cnt_level.mcToken">
            <summary>
            The mc token
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.token.cnt_level.mcChunk">
            <summary>
            Chunk constructed
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.token.cnt_level.mcSubtoken">
            <summary>
            The mc subtoken: hypothetical use
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.token.tkn_specialforms.decoration">
            <summary>
            Symbolic decoration> like arrows, buttons, |, and other stuff
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.token.tkn_stream.quoted">
            <summary>
            Between quotation marks \", ', ``,
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.token.tkn_stream.brackets">
            <summary>
            The brackets: ( [ {
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.flags.token.tkn_stream.betweenComma">
            <summary>
            The between comma: ,
            </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.lexicUnit.lexicGraph.lexicalDefinitionLine">
            <summary>
            Gets or sets the lexical definition line.
            </summary>
            <value>
            The lexical definition line.
            </value>
        </member>
        <member name="T:imbNLP.PartOfSpeech.lexicUnit.lexicGraphSet`1">
            <summary>
            Set of lexicGraphs - keyed by search needle
            </summary>
            <seealso cref="!:System.Collections.Concurrent.ConcurrentDictionary&lt;System.String, imbNLP.PartOfSpeech.lexicUnit.lexicGraph&gt;" />
        </member>
        <member name="T:imbNLP.PartOfSpeech.lexicUnit.lexicInflection">
            <summary>
            Graph representing single lexic inflection
            </summary>
            <seealso cref="T:imbNLP.PartOfSpeech.lexicUnit.lexicGraph" />
        </member>
        <member name="P:imbNLP.PartOfSpeech.lexicUnit.lexicInflection.lexicalDefinitionLine">
            <summary>
            Gets or sets the lexical definition line.
            </summary>
            <value>
            The lexical definition line.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.lexicUnit.lexicInflection.lemmaForm">
            <summary>
            Lemma form for this inflection
            </summary>
            <value>
            The lemma form.
            </value>
        </member>
        <member name="M:imbNLP.PartOfSpeech.lexicUnit.lexicInflection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbNLP.PartOfSpeech.lexicUnit.lexicInflection"/> class.
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.lexicUnit.lexicInflection.GetAllTagsFromGramTags">
            <summary>
            Gets the tag from gram tags.
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.lexicUnit.lexicInflection.GetTagFromGramTags``1(``0)">
            <summary>
            Gets all tags of specified type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="def">The definition.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.lexicUnit.lexicInflection.AddGrammarCase(imbNLP.PartOfSpeech.resourceProviders.core.grammaticTagCollection)">
            <summary>
            Adds the grammar case under this inflection
            </summary>
            <param name="tags">The tags.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.lexicUnit.lexicInflection.CreateChildItem(System.String)">
            <summary>
            Creates new child item and sets the name, but still do not add it. Used internally by <see cref="!:Add(String pathWithName)" />
            </summary>
            <param name="nameForChild">The name for child.</param>
            <returns></returns>
        </member>
        <member name="T:imbNLP.PartOfSpeech.lexicUnit.lexicLemmaInTypeNode">
            <summary>
            Represents one lemma form per <see cref="T:imbNLP.PartOfSpeech.flags.basic.pos_type"/>
            </summary>
            <seealso cref="T:imbNLP.PartOfSpeech.lexicUnit.lexicGraph" />
        </member>
        <member name="M:imbNLP.PartOfSpeech.lexicUnit.tokenGraphs.tokenGraph.#ctor(System.String)">
            <summary>
            Initializes a new instance of the root <see cref="T:imbNLP.PartOfSpeech.lexicUnit.tokenGraphs.tokenGraphNode"/> class -- assigned to the <see cref="F:imbNLP.PartOfSpeech.lexicUnit.tokenGraphs.tokenGraphNodeType.word_query"/>
            </summary>
            <param name="__queryToken">The query token.</param>
        </member>
        <member name="T:imbNLP.PartOfSpeech.lexicUnit.tokenGraphs.tokenGraphNode">
            <summary>
            Graph structure for processing the results of <see cref="!:extendedLanguage"/> queries
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.lexicUnit.tokenGraphs.tokenGraphNode.#ctor(System.String,imbNLP.PartOfSpeech.lexicUnit.tokenGraphs.tokenGraphNodeType,imbNLP.PartOfSpeech.lexicUnit.tokenGraphs.tokenGraphNode)">
            <summary>
            Creating instance of a child token node
            </summary>
            <param name="__token">The token.</param>
            <param name="__type">The type.</param>
            <param name="__parent">The parent.</param>
        </member>
        <member name="M:imbNLP.PartOfSpeech.lexicUnit.tokenGraphs.tokenGraphNode.AddKeyValueChildren(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},imbNLP.PartOfSpeech.lexicUnit.tokenGraphs.tokenGraphNodeType,imbNLP.PartOfSpeech.lexicUnit.tokenGraphs.tokenGraphNodeType,System.Boolean)">
            <summary>
            Adds children and their children -- where Key is child, and Value is grandchild
            </summary>
            <param name="source">The source.</param>
            <param name="typeForGrandChild">The type for value.</param>
            <param name="typeForChild">The type for key.</param>
        </member>
        <member name="M:imbNLP.PartOfSpeech.lexicUnit.tokenGraphs.tokenGraphNode.AddKeyMatches(imbSCI.DataComplex.special.translationTableMulti{System.String,System.String},imbNLP.PartOfSpeech.lexicUnit.tokenGraphs.tokenGraphNodeType)">
            <summary>
            Adds the key matches.
            </summary>
            <param name="source">The source.</param>
            <param name="typeForValue">The type for value.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:imbNLP.PartOfSpeech.lexicUnit.tokenGraphs.tokenGraphNode.AddValueMatches(imbSCI.DataComplex.special.translationTableMulti{System.String,System.String},imbNLP.PartOfSpeech.lexicUnit.tokenGraphs.tokenGraphNodeType)" -->
        <member name="M:imbNLP.PartOfSpeech.lexicUnit.tokenGraphs.tokenGraphNode.Add(System.String,imbNLP.PartOfSpeech.lexicUnit.tokenGraphs.tokenGraphNodeType)">
            <summary>
            Add - generic method
            </summary>
            <param name="__token">The token.</param>
            <param name="__type">The type.</param>
        </member>
        <member name="P:imbNLP.PartOfSpeech.lexicUnit.tokenGraphs.tokenGraphNode.Item(System.String,imbNLP.PartOfSpeech.lexicUnit.tokenGraphs.tokenGraphNodeType)">
            <summary>
            Gets the <see cref="T:imbNLP.PartOfSpeech.lexicUnit.tokenGraphs.tokenGraphNode" /> with the specified <c>t</c>. If <c>t</c> not found a new child with specified <c>cType</c> is created and returned
            </summary>
            <value>
            The <see cref="T:imbNLP.PartOfSpeech.lexicUnit.tokenGraphs.tokenGraphNode" />.
            </value>
            <param name="t">The t.</param>
            <returns></returns>
        </member>
        <member name="P:imbNLP.PartOfSpeech.lexicUnit.tokenGraphs.tokenGraphNode.children">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.lexicUnit.tokenGraphs.tokenGraphNode.parent">
            <summary> </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.lexicUnit.tokenGraphs.tokenGraphNode.token">
             <summary>
            
             </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.lexicUnit.tokenGraphs.tokenGraphNode.type">
            <summary> </summary>
        </member>
        <member name="T:imbNLP.PartOfSpeech.lexicUnit.tokenGraphs.tokenGraphSet">
             <summary>
            
             </summary>
             <seealso cref="!:System.Collections.Generic.IDictionary&lt;System.String, imbLanguageFramework.extended.tokenGraphs.tokenGraph&gt;" />
        </member>
        <member name="P:imbNLP.PartOfSpeech.lexicUnit.tokenGraphs.tokenGraphSet.items">
             <summary>
            
             </summary>
        </member>
        <member name="T:imbNLP.PartOfSpeech.map.textMap`1">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
        </member>
        <member name="P:imbNLP.PartOfSpeech.map.textMap`1.render">
            <summary>
            Gets or sets the render.
            </summary>
            <value>
            The render.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.map.textMap`1.items">
            <summary>
            Gets or sets the items.
            </summary>
            <value>
            The items.
            </value>
        </member>
        <member name="M:imbNLP.PartOfSpeech.map.textMap`1.AddRender(System.String)">
            <summary>
            Adds the render.
            </summary>
            <param name="part">The part.</param>
        </member>
        <member name="M:imbNLP.PartOfSpeech.map.textMap`1.Add(`0,System.String)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="part">The part.</param>
        </member>
        <member name="M:imbNLP.PartOfSpeech.map.textMap`1.AddPlainRender(System.String)">
            <summary>
            Simply adds at the end of rendering the specified content
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:imbNLP.PartOfSpeech.map.textMap`1.AddOpen(`0,System.String)">
            <summary>
            Adds the open.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:imbNLP.PartOfSpeech.map.textMap`1.AddClose(System.String)">
            <summary>
            Adds the close.
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.map.textMap`1.SelectContainer(System.Int32,System.Int32)">
            <summary>
            Selects the container.
            </summary>
            <param name="pos">The position.</param>
            <param name="length">The length.</param>
            <returns>Containers</returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.map.textMap`1.Select(System.Int32,System.Int32)">
            <summary>
            Selects the specified position.
            </summary>
            <param name="pos">The position.</param>
            <param name="length">The length.</param>
            <returns>Items</returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.map.textMap`1.Select(System.Text.RegularExpressions.MatchCollection)">
            <summary>
            Selects mapped items with the specified matches.
            </summary>
            <param name="matches">The matches.</param>
            <returns></returns>
        </member>
        <member name="T:imbNLP.PartOfSpeech.map.textMapContainer`1">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
        </member>
        <member name="M:imbNLP.PartOfSpeech.map.textMapContainer`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbNLP.PartOfSpeech.map.textMapContainer`1"/> class.
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.map.textMapContainer`1.#ctor(`0,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:imbNLP.PartOfSpeech.map.textMapContainer`1"/> class.
            </summary>
            <param name="_item">The item.</param>
            <param name="_render">The render.</param>
            <param name="_pos">The position.</param>
        </member>
        <member name="P:imbNLP.PartOfSpeech.map.textMapContainer`1.pos">
            <summary>
            Gets or sets the position.
            </summary>
            <value>
            The position.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.map.textMapContainer`1.length">
            <summary>
            Gets or sets the length.
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.map.textMapContainer`1.item">
            <summary>
            Gets or sets the item.
            </summary>
            <value>
            The item.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.map.textMapContainer`1.render">
            <summary>
            Gets or sets the render.
            </summary>
            <value>
            The render.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.microData.core.microDataBase.MCElement">
            <summary>
            Related document element
            </summary>
            <value>
            The mc element.
            </value>
        </member>
        <member name="T:imbNLP.PartOfSpeech.microData.microMeasureWithUnit">
            <summary>
            Measure with unit
            </summary>
            <seealso cref="T:imbNLP.PartOfSpeech.microData.core.microDataBase" />
        </member>
        <member name="P:imbNLP.PartOfSpeech.microData.microValueWithUnit.numericValue">
            <summary>
            Numeric value
            </summary>
            <value>
            The numeric value.
            </value>
        </member>
        <member name="T:imbNLP.PartOfSpeech.nlpTools.itmConstructorTypeManager">
            <summary>
            Type manager
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.nlpTools.itmConstructorTypeManager.GetInstance(System.String,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Gets the of model
            </summary>
            <param name="crawler_classname">The crawler classname.</param>
            <param name="loger">The loger.</param>
            <returns></returns>
        </member>
        <member name="P:imbNLP.PartOfSpeech.nlpTools.nlpTypeManager.main">
            <summary>
            NLP type manager
            </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.nlpTools.nlpTypeManager.modelTypeManager">
            <summary>
            static and autoinitiated object
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.nlpTools.nlpTypeManager.prepare">
            <summary>
            Calls for type loading
            </summary>
        </member>
        <member name="T:imbNLP.PartOfSpeech.nlpTools.pipelineModelTypeManager">
            <summary>
            Type manager
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.nlpTools.pipelineModelTypeManager.GetInstance(System.String,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Gets the of model
            </summary>
            <param name="crawler_classname">The crawler classname.</param>
            <param name="loger">The loger.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.nlpTools.wlfConstructorTypeManager.GetInstance(System.String,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Gets the of model
            </summary>
            <param name="crawler_classname">The crawler classname.</param>
            <param name="loger">The loger.</param>
            <returns></returns>
        </member>
        <member name="T:imbNLP.PartOfSpeech.pipeline.models.standardModel">
            <summary>
            Simple demonstrative model for content token processing
            </summary>
            <seealso cref="T:imbNLP.PartOfSpeech.pipeline.core.pipelineModelForContentToken" />
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipeline.models.standardModel.#ctor">
            <summary>
            Self constructed standard model
            </summary>
        </member>
        <member name="T:imbNLP.PartOfSpeech.pipeline.core.IPipelineModel">
            <summary>
            Interface for pipeline model
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipeline.core.IPipelineModel.constructionProcess">
            <summary>
            Constructions the process.
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipeline.core.IPipelineModel.createPrimaryTasks(System.Object[])">
            <summary>
            Creates the primary tasks, called by machine's run method
            </summary>
            <param name="resources">The resources.</param>
            <returns></returns>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.core.IPipelineModel.taskInitialLife">
            <summary>
            Initial life for new task at this model
            </summary>
            <value>
            The task initial life.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.core.IPipelineModel.exitBin">
            <summary>
            Default exit bin
            </summary>
            <value>
            The exit bin.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.core.IPipelineModel.trashBin">
            <summary>
            Trashed
            </summary>
            <value>
            The trash bin.
            </value>
        </member>
        <member name="T:imbNLP.PartOfSpeech.pipeline.core.IPipelineNode">
            <summary>
            Interface to a pipeline node
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipeline.core.IPipelineNode.AddNode(imbNLP.PartOfSpeech.pipeline.core.IPipelineNode,System.Boolean)">
            <summary>
            Gives to node auto-unique name variation, adds it to children and returns newly added node, or optionally returns this node
            </summary>
            <param name="node">The node to add, and auto-rename if required.</param>
            <param name="returnHost">if set to <c>true</c> it will return this node, if set to <c>false</c> it will return newly created node for fluid operation</param>
            <returns>this node (<c>returnHost</c> is true) or newly added node</returns>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.core.IPipelineNode.Label">
            <summary>
            Display name, used for reporting purposes
            </summary>
            <value>
            The label.
            </value>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipeline.core.IPipelineNode.SetLabel">
            <summary>
            Automatically sets label
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipeline.core.IPipelineNode.process(imbNLP.PartOfSpeech.pipeline.machine.IPipelineTask)">
            <summary>
            Processes the specified task and returns the next node to go into
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.core.IPipelineNode.next">
            <summary>
            Default next node to go, for negative results of the test
            </summary>
            <value>
            The next.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.core.IPipelineNode.forward">
            <summary>
            Default next node to go, for positive result of the test
            </summary>
            <value>
            The forward.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.core.IPipelineNode.model">
            <summary>
            Regerence to the model root
            </summary>
            <value>
            The model.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.core.IPipelineNode.nodeType">
            <summary>
            Type of node designator
            </summary>
            <value>
            The type of the node.
            </value>
        </member>
        <member name="T:imbNLP.PartOfSpeech.pipeline.core.IPipelineNodeForContentToken">
            <summary>
            Interface to a node for content token
            </summary>
            <seealso cref="T:imbNLP.PartOfSpeech.pipeline.core.IPipelineNode" />
        </member>
        <member name="T:imbNLP.PartOfSpeech.pipeline.core.IPipelineNodeRegular">
            <summary>
            Regular node
            </summary>
            <seealso cref="T:imbNLP.PartOfSpeech.pipeline.core.IPipelineNode" />
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipeline.core.IPipelineNodeRegular.SetLabel">
            <summary>
            Automatically sets label
            </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.core.IPipelineNodeRegular.forwardPredefined">
            <summary>
            Gets or sets the forward predefined - overrides default <see cref="P:imbNLP.PartOfSpeech.pipeline.core.IPipelineNode.forward"/> behaviour
            </summary>
            <value>
            The forward predefined.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.core.IPipelineNodeRegular.nextPredefined">
            <summary>
            Gets or sets the next predefined - overrides default <see cref="P:imbNLP.PartOfSpeech.pipeline.core.IPipelineNode.next"/> behaviour
            </summary>
            <value>
            The next predefined.
            </value>
        </member>
        <member name="T:imbNLP.PartOfSpeech.pipeline.core.pipelineFlagRuleDistributor`1">
            <summary>
            Flag set rule based distributor
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:imbNLP.PartOfSpeech.pipeline.core.pipelineNode`1" />
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipeline.core.pipelineFlagRuleDistributor`1.#ctor(imbSCI.Core.extensions.data.containsQueryTypeEnum,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:imbNLP.PartOfSpeech.pipeline.core.pipelineFlagRuleDistributor`1"/> class.
            </summary>
            <param name="_ruleType">Type of the rule.</param>
            <param name="_flags">The flags.</param>
        </member>
        <member name="T:imbNLP.PartOfSpeech.pipeline.core.pipelineModel`1">
            <summary>
            Model
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:imbNLP.PartOfSpeech.pipeline.core.pipelineNode`1" />
            <seealso cref="T:imbNLP.PartOfSpeech.pipeline.core.IPipelineModel" />
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.core.pipelineModel`1.description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipeline.core.pipelineModel`1.constructionProcess">
            <summary>
            Process of self construction
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipeline.core.pipelineModel`1.createPrimaryTasks(System.Object[])">
            <summary>
            It will be called by <see cref="!:pipelineMachine.run(IPipelineModel)"/> method to get initial tasks to run
            </summary>
            <param name="resources">Arbitrary resources that might be used for task creation</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipeline.core.pipelineModel`1.process(imbNLP.PartOfSpeech.pipeline.machine.IPipelineTask)">
            <summary>
            Process call -- just forwards the task to its first child
            </summary>
            <param name="task">The task.</param>
            <returns></returns>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.core.pipelineModel`1.next">
            <summary>
            Default next pipeline node
            </summary>
            <value>
            The next.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.core.pipelineModel`1.exitBin">
            <summary>
            Default exit bin
            </summary>
            <value>
            The exit bin.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.core.pipelineModel`1.trashBin">
            <summary>
            Trashed
            </summary>
            <value>
            The trash bin.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.core.pipelineModel`1.taskInitialLife">
            <summary>
            Initial life for new task at this model
            </summary>
            <value>
            The task initial life.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.core.pipelineModel`1.imbNLP#PartOfSpeech#pipeline#core#IPipelineModel#exitBin">
            <summary>
            Default exit bin
            </summary>
            <value>
            The exit bin.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.core.pipelineModel`1.imbNLP#PartOfSpeech#pipeline#core#IPipelineModel#trashBin">
            <summary>
            Trashed
            </summary>
            <value>
            The trash bin.
            </value>
        </member>
        <member name="T:imbNLP.PartOfSpeech.pipeline.core.pipelineModelForContentToken">
            <summary>
            Base class for dynamically built models and prebuilt models
            </summary>
            <seealso cref="!:imbNLP.PartOfSpeech.pipeline.core.pipelineModel&lt;imbNLP.PartOfSpeech.pipeline.machine.pipelineTaskSubjectContentToken&gt;" />
        </member>
        <member name="T:imbNLP.PartOfSpeech.pipeline.core.pipelineNode`1">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <seealso cref="T:imbSCI.Data.collection.graph.graphNodeCustom" />
             <seealso cref="T:imbNLP.PartOfSpeech.pipeline.core.IPipelineNode" />
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.core.pipelineNode`1.Label">
            <summary>
            Title of the node, to be displayed in graphs
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipeline.core.pipelineNode`1.process(imbNLP.PartOfSpeech.pipeline.machine.IPipelineTask)">
            <summary>
            Process call
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipeline.core.pipelineNode`1.AddNode(imbNLP.PartOfSpeech.pipeline.core.IPipelineNode,System.Boolean)">
            <summary>
            Gives to node auto-unique name variation, adds it to children and returns newly added node, or optionally returns this node
            </summary>
            <param name="node">The node to add, and auto-rename if required.</param>
            <param name="returnHost">if set to <c>true</c> it will return this node, if set to <c>false</c> it will return newly created node for fluid operation</param>
            <returns>
            this node (<c>returnHost</c> is true) or newly added node
            </returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipeline.core.pipelineNode`1.NestNode(imbNLP.PartOfSpeech.pipeline.core.IPipelineNode,System.Boolean)">
            <summary>
            Nests the node.
            </summary>
            <param name="node">The node.</param>
            <param name="returnHost">if set to <c>true</c> [return host].</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipeline.core.pipelineNode`1.AddStealthLink(imbNLP.PartOfSpeech.pipeline.core.IPipelineNode,System.Boolean)">
            <summary>
            Adds the stealth link.
            </summary>
            <param name="node">The node.</param>
            <param name="returnHost">if set to <c>true</c> [return host].</param>
            <returns></returns>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.core.pipelineNode`1.next">
            <summary>
            Default next pipeline node
            </summary>
            <value>
            The next.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.core.pipelineNode`1.forward">
            <summary>
            Default next node to go, for positive result of the test
            </summary>
            <value>
            The forward.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.core.pipelineNode`1.nodeType">
            <summary>
            Type of node designator
            </summary>
            <value>
            The type of the node.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.core.pipelineNode`1.model">
            <summary>
            Regerence to the model root
            </summary>
            <value>
            The model.
            </value>
        </member>
        <member name="T:imbNLP.PartOfSpeech.pipeline.core.pipelineNodeBin`1">
            <summary>
            End node
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:imbNLP.PartOfSpeech.pipeline.core.pipelineNode`1" />
            <seealso cref="T:imbNLP.PartOfSpeech.pipeline.core.IPipelineNode" />
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.core.pipelineNodeBin`1.isRunningInRoutedCounterMode">
            <summary>
            Gets a value indicating whether this instance is running in routed counter mode.
            </summary>
            <value>
              <c>true</c> if this instance is running in routed counter mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.core.pipelineNodeBin`1.selfContainer">
            <summary>
            Repository for self contained bin mode
            </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.core.pipelineNodeBin`1.routedContainer">
            <summary>
            Gets or sets the routed container.
            </summary>
            <value>
            The routed container.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.core.pipelineNodeBin`1.container">
            <summary>
            Task Subjects that are contained
            </summary>
            <value>
            The contained.
            </value>
        </member>
        <member name="T:imbNLP.PartOfSpeech.pipeline.core.pipelineNodeRegular`1">
            <summary>
            Regular pipeline node with forward and next node directions
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:imbNLP.PartOfSpeech.pipeline.core.pipelineNode`1" />
            <seealso cref="T:imbNLP.PartOfSpeech.pipeline.core.IPipelineNode" />
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipeline.core.pipelineNodeRegular`1.AddNodes(imbNLP.PartOfSpeech.pipeline.core.IPipelineNode,imbNLP.PartOfSpeech.pipeline.core.IPipelineNode,System.Boolean,System.Boolean)">
            <summary>
            Adds the nodes as <see cref="P:imbNLP.PartOfSpeech.pipeline.core.pipelineNodeRegular`1.forwardPredefined"/> and <see cref="P:imbNLP.PartOfSpeech.pipeline.core.pipelineNodeRegular`1.nextPredefined"/>, and returns node according to <c>returnHost</c> and <c>returnNextNotForward</c>
            </summary>
            <param name="__forwardNode">The forward node.</param>
            <param name="__nextNode">The next node.</param>
            <param name="returnHost">if set to <c>true</c> [return host].</param>
            <param name="returnNextNotForward">if set to <c>true</c> [return next not forward].</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipeline.core.pipelineNodeRegular`1.SetLabel">
            <summary>
            Automatically sets label
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipeline.core.pipelineNodeRegular`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbNLP.PartOfSpeech.pipeline.core.pipelineNodeRegular`1"/> class.
            </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.core.pipelineNodeRegular`1.forward">
            <summary>
            Default next node to go, for positive result of the test
            </summary>
            <value>
            The forward.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.core.pipelineNodeRegular`1.next">
            <summary>
            Default next pipeline node: if there is a child, then child -- if there is a sibling next to this node> then sibling, if this was the last child of parent then <see cref="P:imbNLP.PartOfSpeech.pipeline.core.IPipelineModel.exitBin"/>
            </summary>
            <value>
            The next.
            </value>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipeline.machine.IPipelineTask.StartProcess(imbNLP.PartOfSpeech.pipeline.machine.pipelineModelExecutionContext)">
            <summary>
            Starts the task execution
            </summary>
            <param name="__model">The model.</param>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.machine.IPipelineTask.lifeSpanLeft">
            <summary>
            How many iterations/node moves are left for this task
            </summary>
            <value>
            The life span left.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.machine.IPipelineTask.subject">
            <summary>
            Item that is subject of process
            </summary>
            <value>
            The subject.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.machine.IPipelineTask.state">
            <summary>
            Current state of the task
            </summary>
            <value>
            The state.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.machine.IPipelineTask.lastNode">
            <summary>
            Node that was executing before <see cref="P:imbNLP.PartOfSpeech.pipeline.machine.IPipelineTask.currentNode"/>
            </summary>
            <value>
            The last node.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.machine.IPipelineTask.currentNode">
            <summary>
            Current node where the task is
            </summary>
            <value>
            The current node.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.machine.IPipelineTask.nextNode">
            <summary>
            Next node designated to traverse to
            </summary>
            <value>
            The next node.
            </value>
        </member>
        <member name="T:imbNLP.PartOfSpeech.pipeline.machine.IPipelineTaskSubject">
            <summary>
            Subject of pipeline processing
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipeline.machine.IPipelineTaskSubject.SetLabel">
            <summary>
            Auto-sets the label.
            </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.machine.IPipelineTaskSubject.Label">
            <summary>
            Display label
            </summary>
            <value>
            The label.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.machine.IPipelineTaskSubject.currentForm">
            <summary>
            Current form of the task subject
            </summary>
            <value>
            The current form.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.machine.IPipelineTaskSubject.initialForm">
            <summary>
            Initial form of task subject
            </summary>
            <value>
            The initial form.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.machine.IPipelineTaskSubject.codeID">
            <summary>
            code identifier
            </summary>
            <value>
            The code identifier.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.machine.IPipelineTaskSubject.flagBag">
            <summary>
            Bag of various flags, associated to the task subject
            </summary>
            <value>
            The flag bag.
            </value>
        </member>
        <member name="T:imbNLP.PartOfSpeech.pipeline.machine.pipelineMachine">
            <summary>
            Machine executes the pipelineModule in parallel manner, and returns <see cref="T:imbNLP.PartOfSpeech.pipeline.machine.pipelineModelExecutionContext"/>
            </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.machine.pipelineMachine.nParallelTasks">
            <summary>
            Number of parallel tasks to perform at once
            </summary>
            <value>
            The n parallel tasks.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.machine.pipelineMachine.machineRunning">
            <summary>
            Gets or sets a value indicating whether [machine running].
            </summary>
            <value>
              <c>true</c> if [machine running]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:imbNLP.PartOfSpeech.pipeline.machine.pipelineMachine.TASKTAKE_INSANELIMIT">
            <summary>
            The tasktake insanelimit
            </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.machine.pipelineMachine.state">
            <summary>
            Gets or sets the state.
            </summary>
            <value>
            The state.
            </value>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipeline.machine.pipelineMachine.statusUpdate(imbNLP.PartOfSpeech.pipeline.machine.pipelineModelExecutionContext)">
            <summary>
            Statuses the update.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipeline.machine.pipelineMachine.run(imbNLP.PartOfSpeech.pipeline.core.IPipelineModel,System.Object[])">
            <summary>
            Runs the specified model.
            </summary>
            <param name="__model">The model.</param>
            <param name="paramsForPrimaryTasks">The parameters for primary tasks creation, passed to the model</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipeline.machine.pipelineMachine.runSeparate(imbNLP.PartOfSpeech.pipeline.machine.pipelineModelExecutionContext)">
            <summary>
            Runs the specified model.
            </summary>
            <param name="output">The output.</param>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.machine.pipelineMachineSettings.doSharePipelineCollectionInTheSession">
            <summary> If true it will do something </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.machine.pipelineMachineSettings.TaskTake">
            <summary> number of parallel task to take and run in one iterations </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.machine.pipelineMachineSettings.StatusReportPeriod">
            <summary> Number of seconds for status report </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.machine.pipelineMachineSettings.TickForCheck">
            <summary> Miliseconds for delay tick before status check  </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.machine.pipelineMachineSettings.doUseParallelExecution">
            <summary> If true it will do something </summary>
        </member>
        <member name="T:imbNLP.PartOfSpeech.pipeline.machine.pipelineModelExecutionContext">
            <summary>
            Result of an pipeline machine processing
            </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.machine.pipelineModelExecutionContext.customDataProperties">
            <summary>
            Collection of custom data properties, accessable from tasks
            </summary>
            <value>
            The custom data properties.
            </value>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipeline.machine.pipelineModelExecutionContext.GetCustomDataProperty``1(System.String)">
            <summary>
            Gets the custom data property.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipeline.machine.pipelineModelExecutionContext.GetAndChangeCustomDataProperty(System.String,System.Int32)">
            <summary>
            Updates custom data property of type Int32 and returns new value
            </summary>
            <param name="key">The key.</param>
            <param name="change">The change.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipeline.machine.pipelineModelExecutionContext.SetCustomDataProperty``1(System.String,``0)">
            <summary>
            Gets the custom data property.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipeline.machine.pipelineModelExecutionContext.GetSinceLastStatusUpdate">
            <summary>
            Gets the since last status update.
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipeline.machine.pipelineModelExecutionContext.#ctor(imbNLP.PartOfSpeech.pipeline.core.IPipelineModel)">
            <summary>
            Initializes a new instance of the <see cref="T:imbNLP.PartOfSpeech.pipeline.machine.pipelineModelExecutionContext"/> class.
            </summary>
            <param name="__model">The model.</param>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.machine.pipelineModelExecutionContext.scheduledTasks">
            <summary>
            Gets or sets the scheduled tasks.
            </summary>
            <value>
            The scheduled tasks.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.machine.pipelineModelExecutionContext.finishedTasks">
            <summary>
            Gets or sets the scheduled tasks.
            </summary>
            <value>
            The scheduled tasks.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.machine.pipelineModelExecutionContext.exitSubjects">
            <summary>
            Subjects that were completed
            </summary>
            <value>
            The exit subjects.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.machine.pipelineModelExecutionContext.trashSubjects">
            <summary>
            Subjects that were trashed
            </summary>
            <value>
            The trash subjects.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.machine.pipelineModelExecutionContext.model">
            <summary>
            pipeline model
            </summary>
            <value>
            The model.
            </value>
        </member>
        <member name="T:imbNLP.PartOfSpeech.pipeline.machine.pipelineTask`1">
            <summary>
            One pipeline task
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:imbNLP.PartOfSpeech.pipeline.machine.IPipelineTask" />
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipeline.machine.pipelineTask`1.#ctor(`0)">
            <summary>
            Sets subject, model reference and lifespan
            </summary>
            <param name="__subject">The subject.</param>
            <param name="__model">The model.</param>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.machine.pipelineTask`1.state">
            <summary>
            Gets or sets the state.
            </summary>
            <value>
            The state.
            </value>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipeline.machine.pipelineTask`1.StartProcess(imbNLP.PartOfSpeech.pipeline.machine.pipelineModelExecutionContext)">
            <summary>
            Starting task execution
            </summary>
            <param name="__context">Context in which </param>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipeline.machine.pipelineTask`1.processNextNode">
            <summary>
            Processes the next node, calculates the next life span, moves> currentNode to lastNode
            /// </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.machine.pipelineTask`1.model">
            <summary>
            Gets or sets the model.
            </summary>
            <value>
            The model.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.machine.pipelineTask`1.lifeSpanLeft">
            <summary>
            How many iterations/node moves are left for this task
            </summary>
            <value>
            The life span left.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.machine.pipelineTask`1.subject">
            <summary>
            Item that is subject of process
            </summary>
            <value>
            The subject.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.machine.pipelineTask`1.currentNode">
            <summary>
            Current node where the task is
            </summary>
            <value>
            The current node.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.machine.pipelineTask`1.nextNode">
            <summary>
            Next node designated to traverse to
            </summary>
            <value>
            The next node.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.machine.pipelineTask`1.lastNode">
            <summary>
            Node that was executing before <see cref="P:imbNLP.PartOfSpeech.pipeline.machine.pipelineTask`1.currentNode" />
            </summary>
            <value>
            The last node.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.machine.pipelineTask`1.imbNLP#PartOfSpeech#pipeline#machine#IPipelineTask#subject">
            <summary>
            Item that is subject of process
            </summary>
            <value>
            The subject.
            </value>
        </member>
        <member name="T:imbNLP.PartOfSpeech.pipeline.mcRepoNodes.pipelineBlockTaskBuilderNode">
            <summary>
            Pipeline transformer node
            </summary>
            <seealso cref="!:imbNLP.PartOfSpeech.pipeline.core.pipelineNodeRegular&lt;imbNLP.PartOfSpeech.pipeline.machine.pipelineTaskSubjectContentToken&gt;" />
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipeline.mcRepoNodes.pipelineBlockTaskBuilderNode.#ctor(imbNLP.PartOfSpeech.decomposing.stream.IStreamComposer)">
            <summary>
            Initializes a new instance of the <see cref="T:imbNLP.PartOfSpeech.pipeline.mcRepoNodes.pipelineBlockTaskBuilderNode"/> class.
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipeline.mcRepoNodes.pipelineBlockTaskBuilderNode.process(imbNLP.PartOfSpeech.pipeline.machine.IPipelineTask)">
            <summary>
            Processes the specified task.
            </summary>
            <param name="task">The task.</param>
            <returns></returns>
        </member>
        <member name="T:imbNLP.PartOfSpeech.pipeline.mcRepoNodes.pipelinePageTaskBuilderNode">
            <summary>
            Task builder node. If the task is not for it, it will forward it to <see cref="P:imbNLP.PartOfSpeech.pipeline.core.IPipelineNode.next"/>,
            </summary>
            <remarks>
            <para>if task is processed and new tasks were fed into <see cref="T:imbNLP.PartOfSpeech.pipeline.machine.pipelineModelExecutionContext"/> it will forward the processed task to the <see cref="P:imbNLP.PartOfSpeech.pipeline.core.IPipelineNode.forward"/></para>
            </remarks>
            <seealso cref="!:imbNLP.PartOfSpeech.pipeline.core.pipelineNodeRegular&lt;imbNLP.PartOfSpeech.pipeline.machine.pipelineTaskSubjectContentToken&gt;" />
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipeline.mcRepoNodes.pipelinePageTaskBuilderNode.#ctor(imbNLP.PartOfSpeech.decomposing.block.IBlockComposer)">
            <summary>
            Initializes a new instance of the <see cref="T:imbNLP.PartOfSpeech.pipeline.mcRepoNodes.pipelinePageTaskBuilderNode"/> class.
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipeline.mcRepoNodes.pipelinePageTaskBuilderNode.process(imbNLP.PartOfSpeech.pipeline.machine.IPipelineTask)">
            <summary>
            Task builder for <see cref="T:imbMiningContext.MCRepository.imbMCRepository"/> level of subject. Sends to next if task is not with <see cref="T:imbNLP.PartOfSpeech.pipelineForPos.subject.pipelineTaskMCRepoSubject"/>
            </summary>
            <param name="task">The task.</param>
            <returns></returns>
        </member>
        <member name="T:imbNLP.PartOfSpeech.pipeline.mcRepoNodes.pipelineRepoTaskBuilderNode">
            <summary>
            Task builder node. If the task is not for it, it will forward it to <see cref="P:imbNLP.PartOfSpeech.pipeline.core.IPipelineNode.next"/>,
            </summary>
            <remarks>
            <para>if task is processed and new tasks were fed into <see cref="T:imbNLP.PartOfSpeech.pipeline.machine.pipelineModelExecutionContext"/> it will forward the processed task to the <see cref="P:imbNLP.PartOfSpeech.pipeline.core.IPipelineNode.forward"/></para>
            </remarks>
            <seealso cref="!:imbNLP.PartOfSpeech.pipeline.core.pipelineNodeRegular&lt;imbNLP.PartOfSpeech.pipeline.machine.pipelineTaskSubjectContentToken&gt;" />
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipeline.mcRepoNodes.pipelineRepoTaskBuilderNode.#ctor(imbSCI.Data.data.sample.samplingSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:imbNLP.PartOfSpeech.pipeline.mcRepoNodes.pipelineRepoTaskBuilderNode" /> class.
            </summary>
            <param name="__takeSetup">The web site sample take setup</param>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipeline.mcRepoNodes.pipelineRepoTaskBuilderNode.process(imbNLP.PartOfSpeech.pipeline.machine.IPipelineTask)">
            <summary>
            Task builder for <see cref="T:imbMiningContext.MCRepository.imbMCRepository"/> level of subject. Sends to next if task is not with <see cref="T:imbNLP.PartOfSpeech.pipelineForPos.subject.pipelineTaskMCRepoSubject"/>
            </summary>
            <param name="task">The task.</param>
            <returns></returns>
        </member>
        <member name="T:imbNLP.PartOfSpeech.pipeline.mcRepoNodes.pipelineSiteTaskBuilderNode">
            <summary>
            Task builder node. If the task is not for it, it will forward it to <see cref="P:imbNLP.PartOfSpeech.pipeline.core.IPipelineNode.next"/>,
            </summary>
            <remarks>
            <para>if task is processed and new tasks were fed into <see cref="T:imbNLP.PartOfSpeech.pipeline.machine.pipelineModelExecutionContext"/> it will forward the processed task to the <see cref="P:imbNLP.PartOfSpeech.pipeline.core.IPipelineNode.forward"/></para>
            </remarks>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipeline.mcRepoNodes.pipelineSiteTaskBuilderNode.#ctor(imbSCI.Data.data.sample.samplingSettings,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:imbNLP.PartOfSpeech.pipeline.mcRepoNodes.pipelineSiteTaskBuilderNode"/> class.
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipeline.mcRepoNodes.pipelineSiteTaskBuilderNode.process(imbNLP.PartOfSpeech.pipeline.machine.IPipelineTask)">
            <summary>
            Task builder for <see cref="T:imbMiningContext.MCRepository.imbMCRepository"/> level of subject. Sends to next if task is not with <see cref="T:imbNLP.PartOfSpeech.pipelineForPos.subject.pipelineTaskMCRepoSubject"/>
            </summary>
            <param name="task">The task.</param>
            <returns></returns>
        </member>
        <member name="T:imbNLP.PartOfSpeech.pipeline.mcRepoNodes.pipelineStreamTaskBuilderNode">
            <summary>
            Pipeline transformer node
            </summary>
            <seealso cref="!:imbNLP.PartOfSpeech.pipeline.core.pipelineNodeRegular&lt;imbNLP.PartOfSpeech.pipeline.machine.pipelineTaskSubjectContentToken&gt;" />
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipeline.mcRepoNodes.pipelineStreamTaskBuilderNode.#ctor(imbNLP.PartOfSpeech.decomposing.token.ITokenComposer)">
            <summary>
            Initializes a new instance of the <see cref="T:imbNLP.PartOfSpeech.pipeline.mcRepoNodes.pipelineStreamTaskBuilderNode"/> class.
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipeline.mcRepoNodes.pipelineStreamTaskBuilderNode.process(imbNLP.PartOfSpeech.pipeline.machine.IPipelineTask)">
            <summary>
            Processes the specified task.
            </summary>
            <param name="task">The task.</param>
            <returns></returns>
        </member>
        <member name="T:imbNLP.PartOfSpeech.pipeline.plugin.pipelineModelConsolePlugin">
            <summary>
            Plugin for imbACE console - pipelineModelConsolePlugin
            </summary>
            <seealso cref="T:imbACE.Services.consolePlugins.aceConsolePluginBase" />
        </member>
        <member name="T:imbNLP.PartOfSpeech.pipeline.postprocessor.pipelinePostprocessBase`2">
            <summary>
            Designed for stand alone iterative processing of <see cref="T:imbNLP.PartOfSpeech.pipeline.machine.IPipelineTaskSubject"/> instances
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TSettings">The type of the settings.</typeparam>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipeline.postprocessor.pipelinePostprocessBase`2.DescribeSelf">
            <summary>
            Describes self in multiple lines. Description contains the most important settings and way of operation
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipeline.postprocessor.pipelinePostprocessBase`2.process(System.Collections.Generic.IEnumerable{`0},imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Processes the specified input.
            </summary>
            <param name="_input">The input.</param>
            <param name="logger">The logger.</param>
            <returns></returns>
        </member>
        <member name="T:imbNLP.PartOfSpeech.pipeline.postprocessor.pipelinePostprocessSettings">
            <summary>
            Basic settings class for <see cref="!:pipelinePostprocessBase"/>
            </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipeline.postprocessor.pipelinePostprocessSettings.keepAllInOutput">
            <summary>
            If set true it will keep all items in the final output
            </summary>
            <value>
              <c>true</c> if [keep all in output]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:imbNLP.PartOfSpeech.pipelineForPos.node.pipelineTableAnnotationNode">
            <summary>
            Annotation pipeline node
            </summary>
            <seealso cref="!:imbNLP.PartOfSpeech.pipeline.core.pipelineNodeRegular&lt;imbNLP.PartOfSpeech.pipeline.machine.pipelineTaskSubjectContentToken&gt;" />
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipelineForPos.node.pipelineTableAnnotationNode.#ctor(System.String,imbSCI.Core.reporting.ILogBuilder,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:imbNLP.PartOfSpeech.pipelineForPos.node.pipelineTableAnnotationNode" /> class.
            </summary>
            <param name="resourcePath">The resource path.</param>
            <param name="logger">The logger.</param>
            <param name="hostType">Type of the host.</param>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipelineForPos.node.pipelineTableAnnotationNode.process(imbNLP.PartOfSpeech.pipeline.machine.IPipelineTask)">
            <summary>
            Processes the specified task.
            </summary>
            <param name="task">The task.</param>
            <returns></returns>
        </member>
        <member name="T:imbNLP.PartOfSpeech.pipelineForPos.node.pipelineContentTokenLevelDistribution">
            <summary>
            Distributes the task according to <see cref="P:imbNLP.PartOfSpeech.pipelineForPos.subject.pipelineTaskSubjectContentToken.contentLevelType"/>
            </summary>
            <seealso cref="!:imbNLP.PartOfSpeech.pipeline.core.pipelineNodeRegular&lt;imbNLP.PartOfSpeech.pipeline.machine.pipelineTaskSubjectContentToken&gt;" />
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipelineForPos.node.pipelineContentTokenLevelDistribution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbNLP.PartOfSpeech.pipelineForPos.node.pipelineContentTokenLevelDistribution"/> class.
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipelineForPos.node.pipelineContentTokenLevelDistribution.process(imbNLP.PartOfSpeech.pipeline.machine.IPipelineTask)">
            <summary>
            Redirects the task by <see cref="T:imbNLP.PartOfSpeech.flags.token.cnt_level"/> to (if not null) corresponding pipeline
            </summary>
            <param name="task">The task.</param>
            <returns>pipeline to direct to</returns>
        </member>
        <member name="T:imbNLP.PartOfSpeech.pipelineForPos.node.pipelineHTMLTagDetection">
            <summary>
            Pipeline transformer node
            </summary>
            <seealso cref="!:imbNLP.PartOfSpeech.pipeline.core.pipelineNodeRegular&lt;imbNLP.PartOfSpeech.pipeline.machine.pipelineTaskSubjectContentToken&gt;" />
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipelineForPos.node.pipelineHTMLTagDetection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbNLP.PartOfSpeech.pipelineForPos.node.pipelineHTMLTagDetection"/> class.
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipelineForPos.node.pipelineHTMLTagDetection.process(imbNLP.PartOfSpeech.pipeline.machine.IPipelineTask)">
            <summary>
            Processes the specified task.
            </summary>
            <param name="task">The task.</param>
            <returns></returns>
        </member>
        <member name="T:imbNLP.PartOfSpeech.pipelineForPos.node.pipelineLexicResourceResolverNode">
            <summary>
            Pipeline transformer node
            </summary>
            <seealso cref="!:imbNLP.PartOfSpeech.pipeline.core.pipelineNodeRegular&lt;imbNLP.PartOfSpeech.pipeline.machine.pipelineTaskSubjectContentToken&gt;" />
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipelineForPos.node.pipelineLexicResourceResolverNode.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:imbNLP.PartOfSpeech.pipelineForPos.node.pipelineLexicResourceResolverNode"/> class.
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipelineForPos.node.pipelineLexicResourceResolverNode.process(imbNLP.PartOfSpeech.pipeline.machine.IPipelineTask)">
            <summary>
            Uses lexic information to transform
            </summary>
            <param name="task">The task.</param>
            <returns></returns>
        </member>
        <member name="T:imbNLP.PartOfSpeech.pipelineForPos.node.pipelineProperFormTransformer">
            <summary>
            Pipeline transformer node
            </summary>
            <seealso cref="!:imbNLP.PartOfSpeech.pipeline.core.pipelineNodeRegular&lt;imbNLP.PartOfSpeech.pipeline.machine.pipelineTaskSubjectContentToken&gt;" />
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipelineForPos.node.pipelineProperFormTransformer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:imbNLP.PartOfSpeech.pipelineForPos.node.pipelineProperFormTransformer"/> class.
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipelineForPos.node.pipelineProperFormTransformer.process(imbNLP.PartOfSpeech.pipeline.machine.IPipelineTask)">
            <summary>
            Processes the specified task.
            </summary>
            <param name="task">The task.</param>
            <returns></returns>
        </member>
        <member name="T:imbNLP.PartOfSpeech.pipelineForPos.node.pipelineRegexTestNode">
            <summary>
            Distribution and/or transformation by regex expression over <see cref="P:imbNLP.PartOfSpeech.pipelineForPos.subject.pipelineTaskSubjectContentToken.currentForm"/>
            </summary>
            <seealso cref="!:imbNLP.PartOfSpeech.pipeline.core.pipelineNodeRegular&lt;imbNLP.PartOfSpeech.pipeline.machine.pipelineTaskSubjectContentToken&gt;" />
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipelineForPos.node.pipelineRegexTestNode.#ctor(System.String,System.Int32,System.Object[])">
            <summary>
            Sets test for distribution <see cref="T:imbNLP.PartOfSpeech.pipelineForPos.node.pipelineRegexTestNode"/> and optionaly for group replacer
            </summary>
            <param name="regexTest">The regex test.</param>
            <param name="groupToCurrent">The group from regex matches to replace <c>currentForm</c> with</param>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipelineForPos.node.pipelineRegexTestNode.#ctor(System.String,System.String)">
            <summary>
            Sets test for regex replacement of the matched test
            </summary>
            <param name="regexTest">The regex test.</param>
            <param name="__replacement">The replacement.</param>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipelineForPos.node.pipelineRegexTestNode.process(imbNLP.PartOfSpeech.pipeline.machine.IPipelineTask)">
            <summary>
            Processes the specified task.
            </summary>
            <param name="task">The task.</param>
            <returns></returns>
        </member>
        <member name="T:imbNLP.PartOfSpeech.pipelineForPos.node.pipelineRegexTestTypeEnum">
            <summary>
            Regex test node sub type
            </summary>
        </member>
        <member name="T:imbNLP.PartOfSpeech.pipelineForPos.node.pipelineTokenGenericAnnotation">
            <summary>
            Determinates generic, regex based annotation. Can be used for <see cref="T:imbMiningContext.MCDocumentStructure.imbMCToken"/>, but also for token streams
            </summary>
            <seealso cref="!:imbNLP.PartOfSpeech.pipeline.core.pipelineNodeRegular&lt;imbNLP.PartOfSpeech.pipeline.machine.pipelineTaskSubjectContentToken&gt;" />
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipelineForPos.node.pipelineTokenGenericAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbNLP.PartOfSpeech.pipelineForPos.node.pipelineTokenGenericAnnotation"/> class.
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipelineForPos.node.pipelineTokenGenericAnnotation.process(imbNLP.PartOfSpeech.pipeline.machine.IPipelineTask)">
            <summary>
            Processes the specified task.
            </summary>
            <param name="task">The task.</param>
            <returns></returns>
        </member>
        <member name="T:imbNLP.PartOfSpeech.pipelineForPos.node.pipelineTransliterationNode">
            <summary>
            Pipeline transformer node
            </summary>
            <seealso cref="!:imbNLP.PartOfSpeech.pipeline.core.pipelineNodeRegular&lt;imbNLP.PartOfSpeech.pipeline.machine.pipelineTaskSubjectContentToken&gt;" />
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipelineForPos.node.pipelineTransliterationNode.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:imbNLP.PartOfSpeech.pipelineForPos.node.pipelineTransliterationNode"/> class.
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipelineForPos.node.pipelineTransliterationNode.process(imbNLP.PartOfSpeech.pipeline.machine.IPipelineTask)">
            <summary>
            Processes the specified task.
            </summary>
            <param name="task">The task.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipelineForPos.render.contentTokenSubjectRender.renderString(imbNLP.PartOfSpeech.pipelineForPos.subject.pipelineTaskSubjectContentToken,imbNLP.PartOfSpeech.pipelineForPos.render.contentTokenSubjectRenderMode)">
            <summary>
            Renders the token into string form
            </summary>
            <param name="token">The token.</param>
            <param name="mode">The mode.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipelineForPos.render.contentTokenSubjectRender.renderOpen(imbNLP.PartOfSpeech.flags.token.cnt_level,imbNLP.PartOfSpeech.pipelineForPos.render.contentTokenSubjectRenderMode)">
            <summary>
            Renders the open.
            </summary>
            <param name="level">The level.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipelineForPos.render.contentTokenSubjectRender.renderClose(imbNLP.PartOfSpeech.flags.token.cnt_level,imbNLP.PartOfSpeech.pipelineForPos.render.contentTokenSubjectRenderMode)">
            <summary>
            Renders the close.
            </summary>
            <param name="level">The level.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipelineForPos.render.contentTokenSubjectRender.render(imbNLP.PartOfSpeech.pipelineForPos.subject.pipelineTaskSubjectContentToken,imbNLP.PartOfSpeech.pipelineForPos.render.contentTokenSubjectRenderMode)">
            <summary>
            Renders the textMap from specified token subject
            </summary>
            <param name="token">The token.</param>
            <param name="mode">The mode.</param>
            <returns></returns>
        </member>
        <member name="T:imbNLP.PartOfSpeech.pipelineForPos.render.contentTokenSubjectRenderMode">
            <summary>
            The way content token subject is rendered
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.pipelineForPos.render.contentTokenSubjectRenderMode.currentForm">
            <summary>
            Putting out the current form of the token
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.pipelineForPos.render.contentTokenSubjectRenderMode.initialForm">
            <summary>
            Putting out the initial form of the token
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.pipelineForPos.render.contentTokenSubjectRenderMode.posTypeTagForm">
            <summary>
            The position type tag form: |A V|N|Part|Conj|
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.pipelineForPos.render.contentTokenSubjectRenderMode.posTypeAndGramTagForm">
            <summary>
            The position type and gram tag form: [Amspf:Nmsps]|ADJ[fs1f]|
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.pipelineForPos.render.contentTokenSubjectRenderMode.flagsForm">
            <summary>
            The flags form: |phoneOfficeNeedle|symbol|number phone phoneNumber|
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.pipelineForPos.render.contentTokenSubjectRenderMode.flagsFullForm">
            <summary>
            The flags form: |dat_business.phoneOfficeNeedle|tkn_contains.symbols|tkn_contains.number dat_business.phone dat_business.phoneNumber|
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.pipelineForPos.render.contentTokenSubjectRenderMode.descriptive">
            <summary>
            The descriptive form: |"kompanijom":"kompanija":N,common,f,s,instrumental:lowerCase,letter,onlyLetters|
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.pipelineForPos.render.contentTokenSubjectRenderMode.lemmaForm">
            <summary>
            The lemma form: clean lemmatic form
            </summary>
        </member>
        <member name="T:imbNLP.PartOfSpeech.pipelineForPos.render.pipelineToDirectedGraphConvertor">
            <summary>
            Converts pipeline model (<see cref="T:imbNLP.PartOfSpeech.pipeline.core.IPipelineModel"/> to <see cref="T:imbSCI.Graph.DGML.DirectedGraph"/>
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipelineForPos.render.pipelineToDirectedGraphConvertor.GetLabel(System.Object)">
            <summary>
            Automatically sets label
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipelineForPos.render.pipelineToDirectedGraphConvertor.GetModelGraph(imbNLP.PartOfSpeech.pipeline.core.pipelineModel{imbNLP.PartOfSpeech.pipelineForPos.subject.pipelineTaskSubjectContentToken},System.Drawing.Color[],System.Int32)">
            <summary>
            Generates simple-styled graph
            </summary>
            <param name="model">The model.</param>
            <param name="colors">The colors: Color.LightGray, Color.WhiteSmoke, Color.OrangeRed, Color.CadetBlue, Color.Yellow, Color.SteelBlue, Color.Orchid</param>
            <param name="limit">The limit.</param>
            <returns></returns>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipelineForPos.render.subjectRenderLayers.layers">
            <summary> </summary>
        </member>
        <member name="T:imbNLP.PartOfSpeech.pipelineForPos.subject.pipelineSubjectTools">
             <summary>
            
             </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipelineForPos.subject.pipelineSubjectTools.GetParentOfType``2(System.Collections.Generic.IEnumerable{``1},System.Int32)">
            <summary>
            Returns first parent in ansestor line that is of specified type
            </summary>
            <typeparam name="T">Type that parent has to be</typeparam>
            <param name="source">The source node - to start from</param>
            <param name="depthLimit">Number of levels allowed for search</param>
            <returns>Parent of specified type or null if not found</returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipelineForPos.subject.pipelineSubjectTools.GetParentOfType``1(imbNLP.PartOfSpeech.pipeline.machine.IPipelineTaskSubject,System.Int32)">
            <summary>
            Returns first parent in ansestor line that is of specified type
            </summary>
            <typeparam name="T">Type that parent has to be</typeparam>
            <param name="source">The source node - to start from</param>
            <param name="depthLimit">Number of levels allowed for search</param>
            <returns>Parent of specified type or null if not found</returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipelineForPos.subject.pipelineSubjectTools.GetSubjectChildrenTokenType``2(System.Collections.Generic.IEnumerable{``1},imbNLP.PartOfSpeech.flags.token.cnt_level[],System.Boolean)">
            <summary>
            Gets the type of the subject children token.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="list">The list.</param>
            <param name="levels">The levels.</param>
            <param name="unique">if set to <c>true</c> [unique].</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipelineForPos.subject.pipelineSubjectTools.ToSubjectTokenType``1(System.Collections.Generic.IEnumerable{imbNLP.PartOfSpeech.pipeline.machine.IPipelineTaskSubject},System.Boolean)">
            <summary>
            To the type of the subject token.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="unique">if set to <c>true</c> [unique].</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipelineForPos.subject.pipelineSubjectTools.ToSubjectToken(System.Collections.Generic.IEnumerable{imbNLP.PartOfSpeech.pipeline.machine.IPipelineTaskSubject},System.Boolean)">
            <summary>
            To the subject token.
            </summary>
            <param name="list">The list.</param>
            <param name="unique">if set to <c>true</c> [unique].</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipelineForPos.subject.pipelineSubjectTools.GetSubjectsOfLevel``1(System.Collections.Generic.IEnumerable{``0},imbNLP.PartOfSpeech.flags.token.cnt_level)">
            <summary>
            Gets the subjects of level.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="level">The level.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.pipelineForPos.subject.pipelineSubjectTools.GetSubjectsOfLevel``1(System.Collections.Generic.IEnumerable{``0},imbNLP.PartOfSpeech.flags.token.cnt_level[])">
            <summary>
            Gets the subjects of level.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="levels">The levels.</param>
            <returns></returns>
        </member>
        <member name="T:imbNLP.PartOfSpeech.pipelineForPos.subject.pipelineTaskSubjectContentToken">
            <summary>
            Task subject for content token
            </summary>
            <seealso cref="T:imbNLP.PartOfSpeech.pipeline.machine.IPipelineTaskSubject" />
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipelineForPos.subject.pipelineTaskSubjectContentToken.Label">
            <summary>
            String used for graph display
            </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipelineForPos.subject.pipelineTaskSubjectContentToken.currentForm">
            <summary>
            Current form of the task subject
            </summary>
            <value>
            The current form.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipelineForPos.subject.pipelineTaskSubjectContentToken.initialForm">
            <summary>
            Initial form of task subject
            </summary>
            <value>
            The initial form.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipelineForPos.subject.pipelineTaskSubjectContentToken.codeID">
            <summary>
            code identifier
            </summary>
            <value>
            The code identifier.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipelineForPos.subject.pipelineTaskSubjectContentToken.graph">
            <summary>
            Gets or sets the graph.
            </summary>
            <value>
            The graph.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.pipelineForPos.subject.pipelineTaskSubjectContentToken.flagBag">
            <summary>
            Bag of various flags, associated to the task subject
            </summary>
            <value>
            The flag bag.
            </value>
        </member>
        <member name="T:imbNLP.PartOfSpeech.pipelineForPos.subject.pipelineTaskTFDFContentSubject">
             <summary>
            
             </summary>
             <seealso cref="T:imbSCI.Data.collection.graph.graphNodeCustom" />
             <seealso cref="T:imbNLP.PartOfSpeech.pipeline.machine.IPipelineTaskSubject" />
        </member>
        <member name="T:imbNLP.PartOfSpeech.resourceProviders.core.grammaticTagCollection">
            <summary>
            Collection of POS enumeration flags, accessible by Type of Enum.
            </summary>
            <remarks>
            <para>The tag collection is new imbNLP API structure for morphosyntactic context of a token</para>
            <para>The collection is not designed to be serialized, it should be converted to string by a <see cref="T:imbNLP.PartOfSpeech.resourceProviders.core.resourceConverterForGramaticTags"/> instance before saved.</para>
            </remarks>
        </member>
        <member name="M:imbNLP.PartOfSpeech.resourceProviders.core.grammaticTagCollection.Get``1(``0)">
            <summary>
            Returns flag value for the specified <c>T</c>
            </summary>
            <typeparam name="T">Enum type that we look for</typeparam>
            <returns>Typed enum flag, if exists</returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.resourceProviders.core.grammaticTagCollection.Get(System.Type)">
            <summary>
            Gets the flag for specified <c>t</c> <see cref="T:System.Type"/>
            </summary>
            <param name="t">The type to get flag for</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">t</exception>
        </member>
        <member name="M:imbNLP.PartOfSpeech.resourceProviders.core.grammaticTagCollection.Add(System.Object)">
            <summary>
            Adds the specified <c>tag</c> to the collection
            </summary>
            <param name="tag">The tag to be added into collection</param>
            <exception cref="T:System.ArgumentNullException">tag</exception>
        </member>
        <member name="M:imbNLP.PartOfSpeech.resourceProviders.core.grammaticTagCollection.ToString">
            <summary>
            Returns a string representation of the tags contained
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.resourceProviders.core.grammaticTagCollection.GetTags(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Returns list with all tags, with distinctive <see cref="T:System.Type"/>. Optionally: returns only tags for types that are specified by <c>forTypes</c>
            </summary>
            <param name="forTypes">If specified, returns only tags for types that are specified</param>
            <returns>List with tags</returns>
        </member>
        <member name="P:imbNLP.PartOfSpeech.resourceProviders.core.grammaticTagCollection.items">
            <summary>
            Grammatic tags by POS enumeration type
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.resourceProviders.core.ITextResourceResolver.GetLexicUnit(System.String,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Main method for token resolution. Returns null on fail
            </summary>
            <param name="key">The key.</param>
            <param name="logger">The logger.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.resourceProviders.core.ITextResourceResolver.GetLemmaSetForInflection(System.String,System.Collections.Generic.List{System.String},imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Gets the lemma set for inflection.
            </summary>
            <param name="inflection">The inflection.</param>
            <param name="allInflections">All inflections.</param>
            <param name="logger">The logger.</param>
            <returns></returns>
        </member>
        <member name="T:imbNLP.PartOfSpeech.resourceProviders.core.lexicResourceTextEntry">
            <summary>
            Basic resource entry - from a lexic resource in text file format
            </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.resourceProviders.core.lexicResourceTextEntry.sourceLine">
            <summary>
            Original source line that was found in the source file
            </summary>
            <value>
            The entry source line.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.resourceProviders.core.lexicResourceTextEntry.lemmaForm">
            <summary>
            The lemma form matching the <see cref="P:imbNLP.PartOfSpeech.resourceProviders.core.lexicResourceTextEntry.tokenForm"/>
            </summary>
            <value>
            The lemma form.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.resourceProviders.core.lexicResourceTextEntry.tokenForm">
            <summary>
            The token form, as it was matched in the source (inflected form)
            </summary>
            <value>
            The token form.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.resourceProviders.core.lexicResourceTextEntry.gramInfo">
            <summary>
            Unparsed grammatical case information, for the tokenForm
            </summary>
            <value>
            The gram information.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.resourceProviders.core.lexicResourceTextEntry.extraInformation">
            <summary>
            Everything found in the entry line, that wasn-t already separated into other properties
            </summary>
            <value>
            The extra information.
            </value>
        </member>
        <member name="T:imbNLP.PartOfSpeech.resourceProviders.core.resourceConverterForGramaticTags">
            <summary>
            Resource conversion table set contains conversion specification for a lexical resource entry interpretation
            </summary>
            <remarks>
            <para>The specification is declared in a Excel file, that follows particular structure.</para>
            </remarks>
        </member>
        <member name="F:imbNLP.PartOfSpeech.resourceProviders.core.resourceConverterForGramaticTags.TABLENAME_TRANSLATION">
            <summary>
            The tablename translation
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.resourceProviders.core.resourceConverterForGramaticTags.TABLENAME_FORMAT">
            <summary>
            The tablename format
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.resourceProviders.core.resourceConverterForGramaticTags.TABLECOLUMN_MEMBERNAME">
            <summary>
            The tablecolumn membername
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.resourceProviders.core.resourceConverterForGramaticTags.TABLECOLUMN_FORMAT">
            <summary>
            The tablecolumn format
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.resourceProviders.core.resourceConverterForGramaticTags.TABLECOLUMN_CODE">
            <summary>
            The tablecolumn code
            </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.resourceProviders.core.resourceConverterForGramaticTags.pos_enum_types">
            <summary>
            Locally used dictionary of pos enums
            </summary>
            <value>
            The position enum types.
            </value>
        </member>
        <member name="M:imbNLP.PartOfSpeech.resourceProviders.core.resourceConverterForGramaticTags.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbNLP.PartOfSpeech.resourceProviders.core.resourceConverterForGramaticTags"/> class.
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.resourceProviders.core.resourceConverterForGramaticTags.LoadSpecificationCSV(System.String,System.String,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Loads the specification from two CSV files
            </summary>
            <param name="formatCSVPath">The format CSV path.</param>
            <param name="translationCSVPath">The translation CSV path.</param>
            <param name="output">The output.</param>
        </member>
        <member name="M:imbNLP.PartOfSpeech.resourceProviders.core.resourceConverterForGramaticTags.LoadSpecificationExcelFile(System.String,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Loads the specification excel file from the specified path, and prints out the log. [Not working]
            </summary>
            <param name="grammSpecPath">The gramm spec path.</param>
            <param name="output">The output.</param>
        </member>
        <member name="M:imbNLP.PartOfSpeech.resourceProviders.core.resourceConverterForGramaticTags.LoadSpecification(System.Data.DataTable,System.Data.DataTable,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Initialize converter with specification from <see cref="T:System.Data.DataTable" />s
            </summary>
            <param name="transTable">The translation table - must have columns: <see cref="F:imbNLP.PartOfSpeech.resourceProviders.core.resourceConverterForGramaticTags.TABLECOLUMN_MEMBERNAME" /> and <see cref="F:imbNLP.PartOfSpeech.resourceProviders.core.resourceConverterForGramaticTags.TABLECOLUMN_CODE" />.</param>
            <param name="formatTable">The format table - must have columns: <see cref="F:imbNLP.PartOfSpeech.resourceProviders.core.resourceConverterForGramaticTags.TABLECOLUMN_MEMBERNAME" /> and <see cref="F:imbNLP.PartOfSpeech.resourceProviders.core.resourceConverterForGramaticTags.TABLECOLUMN_FORMAT" />.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="P:imbNLP.PartOfSpeech.resourceProviders.core.resourceConverterForGramaticTags.posTypeVsPattern">
            <summary>
            Ordinal format definition per <see cref="T:imbNLP.PartOfSpeech.flags.basic.pos_type"/>
            </summary>
            <value>
            The position of enum types in string pattern of the format
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.resourceProviders.core.resourceConverterForGramaticTags.posEnumVsString">
            <summary>
            The POS Enum value vs string table, used for translation
            </summary>
            <value>
            The position enum vs string.
            </value>
        </member>
        <member name="M:imbNLP.PartOfSpeech.resourceProviders.core.resourceConverterForGramaticTags.GetStringFor(System.Object,System.Boolean)">
            <summary>
            Gets the string version for the posEnumValue specified. For <c>none</c> returns empty string
            </summary>
            <param name="posEnumValue">The POS Enum value to convert</param>
            <param name="enforceSupport">if set to <c>true</c> it will enforce support by calling <see cref="M:System.Object.ToString"/></param>
            <returns>String representation</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Not supported by this specification - posEnumValue</exception>
        </member>
        <member name="M:imbNLP.PartOfSpeech.resourceProviders.core.resourceConverterForGramaticTags.ConvertFromString(System.String)">
            <summary>
            Builds <see cref="T:imbNLP.PartOfSpeech.resourceProviders.core.grammaticTagCollection"/> instance from string form
            </summary>
            <param name="tag">The string encoding that is to be interpreted into grammatic tag</param>
            <returns>Instance of grammaticTagCollection built from the string input</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Tag flag [" + s+ "] not resolved in [" +t.Name + "] - tag</exception>
        </member>
        <member name="M:imbNLP.PartOfSpeech.resourceProviders.core.resourceConverterForGramaticTags.ConvertToString(imbNLP.PartOfSpeech.resourceProviders.core.grammaticTagCollection)">
            <summary>
            Converts the specified grammatic tag collection into string format according to loaded specification
            </summary>
            <param name="tag">The tag.</param>
            <returns></returns>
        </member>
        <member name="T:imbNLP.PartOfSpeech.resourceProviders.core.tableAnnotationResolver">
            <summary>
            Annotation resolver, uses definitions from Excel table
            </summary>
            <seealso cref="T:imbNLP.PartOfSpeech.resourceProviders.core.tableResourceResolverBase" />
        </member>
        <member name="M:imbNLP.PartOfSpeech.resourceProviders.core.tableAnnotationResolver.process(System.String)">
            <summary>
            Processes the specified input.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.resourceProviders.core.tableAnnotationResolver.#ctor(System.String,imbSCI.Core.reporting.ILogBuilder,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:imbNLP.PartOfSpeech.resourceProviders.core.tableAnnotationResolver"/> class.
            </summary>
            <param name="annotationTablePath">The annotation table path.</param>
            <param name="logger">The logger.</param>
            <param name="hostType">Type of the host.</param>
        </member>
        <member name="T:imbNLP.PartOfSpeech.resourceProviders.core.tableReplaceResolver">
             <summary>
            
             </summary>
             <seealso cref="T:imbNLP.PartOfSpeech.resourceProviders.core.tableResourceResolverBase" />
        </member>
        <member name="M:imbNLP.PartOfSpeech.resourceProviders.core.tableReplaceResolver.process(System.String)">
            <summary>
            Replaces found needles in the input
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="T:imbNLP.PartOfSpeech.resourceProviders.core.tableReplaceResolverItem">
            <summary>
            Replace resolver definition item
            </summary>
        </member>
        <member name="T:imbNLP.PartOfSpeech.resourceProviders.core.textResourceIndexBase">
            <summary>
            Common base for lexical resources based on indexed nested dictionaries. Higher performance then direct file search based.
            </summary>
            <seealso cref="!:imbSCI.Data.collection.nested.aceDictionaryLetterIndexSet&lt;imbNLP.PartOfSpeech.lexicUnit.lexicInflection&gt;" />
        </member>
        <member name="P:imbNLP.PartOfSpeech.resourceProviders.core.textResourceIndexBase.registratedLemmaIndex">
            <summary>
            Inflection to lemma index
            </summary>
            <value>
            The index of the registrated lemma.
            </value>
        </member>
        <member name="M:imbNLP.PartOfSpeech.resourceProviders.core.textResourceIndexBase.Setup(System.String,System.String,System.String,imbSCI.Core.reporting.ILogBuilder,imbNLP.PartOfSpeech.resourceProviders.core.textResourceIndexResolveMode)">
            <summary>
            Setups the specified resource file path.
            </summary>
            <param name="resourceFilePath">The resource file path.</param>
            <param name="grammSpecFilename">The gramm spec filename.</param>
            <param name="output">The output.</param>
            <exception cref="T:System.ArgumentNullException">
            resourceFilePath
            or
            grammSpecFilename
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">File format not recognized for " + nameof(textResourceResolverBase) + " Setup call. - grammSpecFilename</exception>
        </member>
        <member name="M:imbNLP.PartOfSpeech.resourceProviders.core.textResourceIndexBase.GetLexicUnit(System.String,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Gets the lexic unit.
            </summary>
            <param name="key">The key.</param>
            <param name="logger">The logger.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.resourceProviders.core.textResourceIndexBase.SaveUsedCache(System.String,System.Boolean)">
            <summary>
            Saves the used cache.
            </summary>
            <param name="localLemmaResourcePath">The local lemma resource path.</param>
        </member>
        <member name="M:imbNLP.PartOfSpeech.resourceProviders.core.textResourceIndexBase.GetLemmaSetForInflection(System.String,System.Collections.Generic.List{System.String},imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            It will get all inflections of the same lemma, if <c>allInflections</c> is supplied, it will remove all matched inflectional form from the list.
            </summary>
            <param name="inflection">The inflection.</param>
            <param name="allInflections">All inflections.</param>
            <param name="logger">The logger.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.resourceProviders.core.textResourceIndexBase.resolveIfRequired(System.Collections.Generic.IEnumerable{imbNLP.PartOfSpeech.lexicUnit.lexicInflection})">
            <summary>
            Resolves if required.
            </summary>
            <param name="ls">The ls.</param>
        </member>
        <member name="M:imbNLP.PartOfSpeech.resourceProviders.core.textResourceIndexBase.resolve(System.String,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Retrieves the lexicInflection information, if required it will process the gram tags
            </summary>
            <param name="key">The key.</param>
            <param name="logger">The logger.</param>
            <returns></returns>
        </member>
        <member name="P:imbNLP.PartOfSpeech.resourceProviders.core.textResourceIndexBase.spellAlternator">
            <summary>
            Used to create alternative misspelled form of inflection word in case initial query failed
            </summary>
            <value>
            The spell alternator.
            </value>
        </member>
        <member name="M:imbNLP.PartOfSpeech.resourceProviders.core.textResourceIndexBase.LoadLexicResource(imbSCI.Core.reporting.ILogBuilder,System.String)">
            <summary>
            Loads the lexic resource.
            </summary>
            <param name="output">The output.</param>
            <param name="resourceFilePath">The resource file path.</param>
        </member>
        <member name="M:imbNLP.PartOfSpeech.resourceProviders.core.textResourceIndexBase.GetSignature">
            <summary>
            Gets the signature.
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.resourceProviders.core.textResourceIndexBase.SaveBinTry(System.String,imbSCI.Core.reporting.ILogBuilder,System.Boolean)">
            <summary>
            Saves the bin try.
            </summary>
            <param name="pathToCachedFile">The path to cached file.</param>
            <param name="logger">The logger.</param>
            <param name="overwrite">if set to <c>true</c> [overwrite].</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.resourceProviders.core.textResourceIndexBase.LoadBinTry(System.String,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Loads the bin try.
            </summary>
            <param name="pathToCachedFile">The path to cached file.</param>
            <param name="logger">The logger.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.resourceProviders.core.textResourceIndexBase.LoadBin(imbSCI.Core.files.folders.folderNode,imbSCI.Core.reporting.ILogBuilder,System.String)">
            <summary>
            Loads the bin.
            </summary>
            <param name="folder">The folder.</param>
            <param name="logger">The logger.</param>
            <param name="filenamePrefix">The filename prefix.</param>
        </member>
        <member name="M:imbNLP.PartOfSpeech.resourceProviders.core.textResourceIndexBase.SaveBin(imbSCI.Core.files.folders.folderNode,imbSCI.Core.reporting.ILogBuilder,System.Boolean,System.String)">
            <summary>
            Saves the bin.
            </summary>
            <param name="folder">The folder.</param>
            <param name="logger">The logger.</param>
            <param name="skipExisting">if set to <c>true</c> [skip existing].</param>
            <param name="filenamePrefix">The filename prefix.</param>
        </member>
        <member name="F:imbNLP.PartOfSpeech.resourceProviders.core.textResourceIndexResolveMode.resolveOnLoad">
            <summary>
            The resolve on load: it will build DOM for each inflected form during the resource load
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.resourceProviders.core.textResourceIndexResolveMode.resolveOnQuery">
            <summary>
            The resolve on query: it will build DOM when asked for certain inflected form, not in advance
            </summary>
        </member>
        <member name="T:imbNLP.PartOfSpeech.resourceProviders.core.textResourceResolverBase">
            <summary>
            Base class for a resolver working with a lexical resource encoded in a text format
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.resourceProviders.core.textResourceResolverBase.Setup(System.String,System.String,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Prepares resource file for querying and loads the grammar tag converter specification
            </summary>
            <param name="resourceFilePath">The text resource file path</param>
            <param name="grammSpecFilename">The Excel file with the grammar tag converter</param>
            <param name="output">The output.</param>
        </member>
        <member name="M:imbNLP.PartOfSpeech.resourceProviders.core.textResourceResolverBase.SelectFromLine(System.String,System.String@,System.String@,System.String@)">
            <summary>
            Parser for text resource lexic unit definition
            </summary>
            <param name="line">The lexic unit definition line</param>
            <param name="inflectForm">The inflect form of a word</param>
            <param name="lemmaForm">The lemma form of a word</param>
            <param name="gramTag">String representation of the grammatic information</param>
        </member>
        <member name="M:imbNLP.PartOfSpeech.resourceProviders.core.textResourceResolverBase.GetSearchRegex(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Builds the search regex pattern for inflected form needle, optionally for lemma needle and gram tag needle
            </summary>
            <param name="inflectFormNeedle">The inflect form needle.</param>
            <param name="lemmaNeedle">The lemma needle.</param>
            <param name="gramTagNeedle">The gram tag needle.</param>
            <param name="allowPartialInflectedForms">if set to <c>true</c> [allow partial inflected forms].</param>
            <param name="allowPartialLemmaForms">if set to <c>true</c> [allow partial lemma forms].</param>
            <returns></returns>
        </member>
        <member name="P:imbNLP.PartOfSpeech.resourceProviders.core.textResourceResolverBase.isReady">
            <summary>
            Indicates if the instance is ready (connected to the resource file, have gram tag converter ready and etc)
            </summary>
            <value>
              <c>true</c> if this instance is ready; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:imbNLP.PartOfSpeech.resourceProviders.core.textResourceResolverBase.GENERAL_SEARCH_LIMIT">
            <summary>
            Default search limit when limit -1 is specified
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.resourceProviders.core.textResourceResolverBase.GetLexicInflection(System.Collections.Generic.IEnumerable{System.String},System.Int32,imbSCI.Core.reporting.ILogBuilder,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Quering the lexic inflections in parallel mode.
            </summary>
            <param name="words">The words to query inflection graphs for. It may contain duplicates, as it will preprocess list to the unique tokens only.</param>
            <param name="limitPerWord">The limit in results per word.</param>
            <param name="logger">The logger.</param>
            <param name="regOpt">The reg opt.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.resourceProviders.core.textResourceResolverBase.GetLexicQuery(System.String,System.Int32,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Gets multi-lemma in type query graph
            </summary>
            <param name="word">The word to look for</param>
            <param name="limit">The limit - limit on number of entries to take</param>
            <param name="logger">The logger - to log out on error</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.resourceProviders.core.textResourceResolverBase.GetInflectionGraph(System.String,System.Int32,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Returns single lexicInflection graph, with different grammTags
            </summary>
            <param name="word">The word.</param>
            <param name="limit">The limit - limit on number of entries to take</param>
            <param name="logger">The logger.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.resourceProviders.core.textResourceResolverBase.GetGramTagsFor(System.String,System.String,imbNLP.PartOfSpeech.flags.basic.pos_type,System.Int32,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Gets grammatic tag collections for specified form, optionally narrowing the search by <see cref="T:imbNLP.PartOfSpeech.flags.basic.pos_type"/> and/or lemma of preference
            </summary>
            <param name="input">The input.</param>
            <param name="lemmaOfPreference">The lemma of preference.</param>
            <param name="posTypePreference">The position type preference.</param>
            <param name="limit">The limit - limit on number of entries to take</param>
            <param name="logger">The logger.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.resourceProviders.core.textResourceResolverBase.GetLemmaFor(System.String,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Returns single lemma for specified input word
            </summary>
            <param name="input">A word to find lemma for</param>
            <param name="logger">The logger - to report on fail.</param>
            <returns>Lemma form or empty string on failure</returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.resourceProviders.core.multitextIndexedResolver.SelectFromLine(System.String,System.String@,System.String@,System.String@)">
            <summary>
            Parser for text resource lexic unit definition
            </summary>
            <param name="line">The lexic unit definition line</param>
            <param name="inflectForm">The inflect form of a word</param>
            <param name="lemmaForm">The lemma form of a word</param>
            <param name="gramTag">String representation of the grammatic information</param>
        </member>
        <member name="P:imbNLP.PartOfSpeech.resourceProviders.lexicResolverSettings.doLogUnresolvedTokens">
            <summary> If true it will log message on tokens that were not resolved </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.resourceProviders.lexicResolverSettings.doUseLockOnResolveCall">
            <summary>
            Gets or sets a value indicating whether the resolver should lock multithreads when resolve called
            </summary>
            <value>
              <c>true</c> if [do use lock on resolve call]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:imbNLP.PartOfSpeech.resourceProviders.multitext.multitextResourceParser">
            <summary>
            Resource parser for MULTITEXT v5 text-format of morpho-syntactic dictionary
            </summary>
            <seealso cref="T:imbNLP.PartOfSpeech.resourceProviders.core.textResourceResolverBase" />
        </member>
        <member name="M:imbNLP.PartOfSpeech.resourceProviders.multitext.multitextResourceParser.#ctor(System.String,System.String,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Setups the text resource resolver for MULTITEXT format
            </summary>
            <param name="resourceFilePath">File path to the actual lexic resource used</param>
            <param name="grammSpecFilename">Gram Tags converter specification</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:imbNLP.PartOfSpeech.resourceProviders.multitext.multitextResourceParser.SelectFromLine(System.String,System.String@,System.String@,System.String@)">
            <summary>
            Parser for text resource lexic unit definition
            </summary>
            <param name="line">The lexic unit definition line</param>
            <param name="inflectForm">The inflect form of a word</param>
            <param name="lemmaForm">The lemma form of a word</param>
            <param name="gramTag">String representation of the grammatic information</param>
        </member>
        <member name="M:imbNLP.PartOfSpeech.resourceProviders.multitext.multitextResourceParser.GetSearchRegex(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Builds the search regex pattern for inflected form needle, optionally for lemma needle and gram tag needle
            </summary>
            <param name="inflectFormNeedle">The inflect form needle.</param>
            <param name="lemmaNeedle">The lemma needle.</param>
            <param name="gramTagNeedle">The gram tag needle.</param>
            <param name="allowPartialInflectedForms">if set to <c>true</c> [allow partial inflected forms].</param>
            <param name="allowPartialLemmaForms">if set to <c>true</c> [allow partial lemma forms].</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:imbNLP.PartOfSpeech.resourceProviders.NamespaceDoc" -->
        <member name="T:imbNLP.PartOfSpeech.providers.dictionary.apertium.apertiumDictionaryResult">
            <summary>
            Result of Apertium dictionary TODO: currently it is for HBS/Serbian vs English dictionary, make it universally usefull
            </summary>
            <seealso cref="!:aceCommonTypes.collection.special.translationTableMulti&lt;System.String, System.String&gt;" />
        </member>
        <!-- Badly formed XML comment ignored for member "F:imbNLP.PartOfSpeech.providers.dictionary.apertium.apertiumDictionaryResult._select_serbianWord" -->
        <member name="M:imbNLP.PartOfSpeech.providers.dictionary.apertium.apertiumDictionaryResult._replace_serbianWord(System.Text.RegularExpressions.Match)">
            <summary>
            Match Evaluation for serbianWord : _select_serbianWord
            </summary>
            <param name="m">Match with value to process</param>
            <returns>For m.value "something" returns "SOMETHING"</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "F:imbNLP.PartOfSpeech.providers.dictionary.apertium.apertiumDictionaryResult._select_englishWord" -->
        <member name="M:imbNLP.PartOfSpeech.providers.dictionary.apertium.apertiumDictionaryResult._replace_englishWord(System.Text.RegularExpressions.Match)">
            <summary>
            Match Evaluation for englishWord : _select_englishWord
            </summary>
            <param name="m">Match with value to process</param>
            <returns>For m.value "something" returns "SOMETHING"</returns>
        </member>
        <member name="F:imbNLP.PartOfSpeech.providers.dictionary.apertium.apertiumDictionaryResult._select_wordType">
            <summary>
            Regex select wordType : n=\"([\\w]*)\"
            </summary>
            <remarks>
            <para>For text: example text</para>
            <para>Selects: ex</para>
            </remarks>
        </member>
        <member name="M:imbNLP.PartOfSpeech.providers.dictionary.apertium.apertiumDictionaryResult.addLine(System.String,System.Boolean)">
            <summary>
            Processes the dictionary definition line (used internally by the framework, not intended for outside use)
            </summary>
            <param name="line">The line.</param>
            <param name="buildModel">if set to <c>true</c> [build model].</param>
        </member>
        <member name="P:imbNLP.PartOfSpeech.providers.dictionary.apertium.apertiumDictionaryResult.termVsGramFlags">
            <summary> </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.providers.dictionary.apertium.apertiumDictionaryResult.apertiumTypes">
             <summary>
            
             </summary>
        </member>
        <member name="T:imbNLP.PartOfSpeech.providers.dictionary.apertium.apertiumDictQueryFlag">
            <summary>
            types of query to perform over the dictinary
            </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.providers.dictionary.apertium.apertiumPOSConverter.posFlagsTranslator">
            <summary>
            static and autoinitiated object
            </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.providers.dictionary.apertium.apertiumPOSConverter.posTypeVsPattern">
            <summary>
            static and autoinitiated object
            </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.providers.dictionary.apertium.apertiumPOSConverter.posTypeVsString">
            <summary>
            static and autoinitiated object
            </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.providers.dictionary.apertium.apertiumPOSConverter.posTypeVsApertiumPosType">
            <summary>
            Translation between apertium and unitex
            </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.providers.dictionary.apertium.apertiumPOSConverter.apertiumToPos">
            <summary>
            static and autoinitiated object
            </summary>
        </member>
        <member name="T:imbNLP.PartOfSpeech.providers.dictionary.apertium.dictionaryResourceApertium">
            <summary>
            Stand-alone quering of an Apertium dictionary
            </summary>
            <seealso cref="!:imbNLP.Data.extended.apertium.dictionaryResourceBase" />
        </member>
        <member name="M:imbNLP.PartOfSpeech.providers.dictionary.apertium.dictionaryResourceApertium.makeQuery(System.String,imbNLP.PartOfSpeech.providers.dictionary.apertium.apertiumDictQueryScope,imbNLP.PartOfSpeech.providers.dictionary.apertium.apertiumDictNeedleSide)">
            <summary>
            Makes the query.
            </summary>
            <param name="token">The token.</param>
            <param name="scope">The scope.</param>
            <param name="side">The side.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException">
            </exception>
        </member>
        <member name="M:imbNLP.PartOfSpeech.providers.dictionary.apertium.dictionaryResourceApertium.queryBestScope(System.String,System.Collections.Generic.IEnumerable{System.String},imbNLP.PartOfSpeech.providers.dictionary.apertium.apertiumDictNeedleSide,System.Boolean)">
            <summary>
            Queries dictionary using [first with <c>token</c>, if not found, then with alternative tokens] scopes in order of confidence until it gets any translation pair. Order of scopes: <see cref="F:imbNLP.PartOfSpeech.providers.dictionary.apertium.apertiumDictQueryScope.exact" />, <see cref="F:imbNLP.PartOfSpeech.providers.dictionary.apertium.apertiumDictQueryScope.startingWith" />, <see cref="F:imbNLP.PartOfSpeech.providers.dictionary.apertium.apertiumDictQueryScope.anywhere" />
            </summary>
            <param name="token">The token to translate, in language of the <c>side</c> specified</param>
            <param name="alternativeTokens">The alternative tokens, to try with if the <c>token</c> wasn't resolved, in language of the <c>side</c> specified</param>
            <param name="side">Side of the dictionary that the search <c>token</c> is from</param>
            <param name="includeAnywhere">if set to <c>true</c> it includes <see cref="F:imbNLP.PartOfSpeech.providers.dictionary.apertium.apertiumDictQueryScope.anywhere"/> scope </param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.providers.dictionary.apertium.dictionaryResourceApertium.queryBestScope(System.String,imbNLP.PartOfSpeech.providers.dictionary.apertium.apertiumDictNeedleSide,System.Boolean)">
             <summary>
             Queries dictionary using scopes in order of confidence until it gets any translation pair. Order of scopes: <see cref="F:imbNLP.PartOfSpeech.providers.dictionary.apertium.apertiumDictQueryScope.exact"/>, <see cref="F:imbNLP.PartOfSpeech.providers.dictionary.apertium.apertiumDictQueryScope.startingWith"/>, <see cref="F:imbNLP.PartOfSpeech.providers.dictionary.apertium.apertiumDictQueryScope.anywhere"/>
             </summary>
             <param name="token">The token to translate, in language of the <c>side</c> specified</param>
             <param name="side">Side of the dictionary that the search <c>token</c> is from</param>
            <param name="includeAnywhere">if set to <c>true</c> it includes <see cref="F:imbNLP.PartOfSpeech.providers.dictionary.apertium.apertiumDictQueryScope.anywhere"/> scope </param>
             <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.providers.dictionary.apertium.dictionaryResourceApertium.query(System.String,imbNLP.PartOfSpeech.providers.dictionary.apertium.apertiumDictQueryScope,imbNLP.PartOfSpeech.providers.dictionary.apertium.apertiumDictNeedleSide)">
            <summary>
            Queries the dictionary for translation of <c>token</c>, into opposite <c>side</c>
            </summary>
            <param name="token">The token to translate, in language of the <c>side</c> specified</param>
            <param name="scope">The scope of search, the matching rule</param>
            <param name="side">Side of the dictionary that the search <c>token</c> is from</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.providers.dictionary.apertium.dictionaryResourceApertium.query(System.Collections.Generic.IEnumerable{System.String},imbNLP.PartOfSpeech.providers.dictionary.apertium.apertiumDictQueryScope,imbNLP.PartOfSpeech.providers.dictionary.apertium.apertiumDictNeedleSide)">
            <summary>
            Queries the specified tokens.
            </summary>
            <param name="tokens">The tokens.</param>
            <param name="scope">The scope.</param>
            <param name="side">The side.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.providers.dictionary.apertium.dictionaryResourceApertium.queryForSynonyms(System.String,imbNLP.PartOfSpeech.providers.dictionary.apertium.apertiumDictQueryScope)">
            <summary>
            Queries for synonyms.
            </summary>
            <param name="token">The token.</param>
            <param name="scope">The scope.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.providers.dictionary.apertium.dictionaryResourceApertium.queryForGraph(System.String,imbNLP.PartOfSpeech.providers.dictionary.apertium.apertiumDictQueryScope,imbNLP.PartOfSpeech.providers.dictionary.apertium.apertiumDictNeedleSide)">
            <summary>
            Queries for graph.
            </summary>
            <param name="token">The token.</param>
            <param name="scope">The scope.</param>
            <param name="side">The side.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.providers.dictionary.apertium.dictionaryResourceApertium.queryByGraphNode(imbNLP.PartOfSpeech.lexicUnit.tokenGraphs.tokenGraphNode,imbNLP.PartOfSpeech.providers.dictionary.apertium.apertiumDictQueryScope,imbNLP.PartOfSpeech.providers.dictionary.apertium.apertiumDictNeedleSide)">
            <summary>
            Queries by graph leaf child nodes and populates grand children
            </summary>
            <param name="graph">The graph.</param>
            <param name="scope">The scope.</param>
            <param name="side">The side.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.providers.dictionary.apertium.dictionaryResourceApertium.queryForGraphSet(System.Collections.Generic.IEnumerable{System.String},imbNLP.PartOfSpeech.providers.dictionary.apertium.apertiumDictQueryScope,imbNLP.PartOfSpeech.providers.dictionary.apertium.apertiumDictNeedleSide)">
            <summary>
            Queries for graph for multiple tokens
            </summary>
            <param name="tokens">The tokens.</param>
            <param name="scope">The scope.</param>
            <param name="side">The side.</param>
            <returns></returns>
        </member>
        <member name="P:imbNLP.PartOfSpeech.providers.dictionary.apertium.dictionaryResourceApertium.dictionaryOperator">
            <summary> </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.providers.dictionary.apertium.dictionaryResourceApertium.dictionaryXml">
             <summary>
            
             </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.providers.dictionary.apertium.dictionaryResourceApertium.SWITCH_TEXTvsXML_SEARCH">
            <summary>
            The switch: if <c>false</c> it will use XmlDocument, if <token></token>
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.providers.dictionary.apertium.dictionaryResourceApertium.prepare(imbNLP.PartOfSpeech.providers.dictionary.apertium.dictionaryResourceSetup,imbSCI.Core.reporting.ILogBuilder,imbSCI.Core.files.folders.folderNode)">
            <summary>
            Prepares the instance to query the dictionary
            </summary>
            <param name="_settings">The settings.</param>
            <param name="_logger">The logger.</param>
            <param name="resourceFolder">The resource folder to search for, if not specified then <see cref="!:appManager.Application.folder_resources"/> is used.</param>
            <returns>True if ready for use</returns>
        </member>
        <member name="T:imbNLP.PartOfSpeech.providers.dictionary.apertium.dictionaryResourceSetup">
            <summary>
            Configuration for <see cref="T:imbNLP.PartOfSpeech.providers.dictionary.apertium.dictionaryResourceApertium"/>
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.providers.dictionary.apertium.dictionaryResourceSetup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbNLP.PartOfSpeech.providers.dictionary.apertium.dictionaryResourceSetup"/> class.
            </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.providers.dictionary.apertium.dictionaryResourceSetup.fileNameSearchPattern">
            <summary>
            Search pattern to be used when searching for Apertium dictionary file
            </summary>
            <value>
            The file name search pattern.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.providers.dictionary.apertium.dictionaryResourceSetup.useTextInsteadOfXML">
            <summary>
            If <c>true</c> it will use text search to find match in the dictionary, otherwise navigates the XML tree
            </summary>
            <value>
              <c>true</c> if [use text instead of XML]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:imbNLP.PartOfSpeech.TFModels.ILemmaCollection">
            <summary>
            Interface for webLemma collections like <see cref="T:imbNLP.PartOfSpeech.TFModels.semanticCloud.lemmaSemanticCloud"/> and <see cref="T:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermTable"/>
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.ILemmaCollection.GetMatchingTerms(imbNLP.PartOfSpeech.TFModels.ILemmaCollection,System.Boolean,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Gets the matching terms.
            </summary>
            <param name="lemmas">The lemmas.</param>
            <param name="reverse">if set to <c>true</c> [reverse].</param>
            <param name="loger">The loger.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.ILemmaCollection.ResolveLemmaForTerm(System.String,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Resolves the lemma for term.
            </summary>
            <param name="nominalForm">The nominal form.</param>
            <param name="logger">The logger.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.ILemmaCollection.ResolveSingleTerm(System.String,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Returns weight of the <c>term</c>, use this where possible instead of <see cref="M:imbNLP.PartOfSpeech.TFModels.ILemmaCollection.ResolveLemmaForTerm(System.String,imbSCI.Core.reporting.ILogBuilder)"/>
            </summary>
            <param name="term">The term.</param>
            <param name="logger">The logger.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.ILemmaCollection.Add(imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTerm)">
            <summary>
            Adds the specified term.
            </summary>
            <param name="term">The term.</param>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.ILemmaCollection.Save(System.String,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Saves the specified filepath.
            </summary>
            <param name="__filepath">The filepath.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.ILemmaCollection.Count">
            <summary>
            Gets the count.
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.ILemmaCollection.ContainsKey(System.String)">
            <summary>
            Determines whether the specified key contains key.
            </summary>
            <param name="key">The key.</param>
            <returns>
              <c>true</c> if the specified key contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.ILemmaCollection.GetList">
            <summary>
            Gets the list.
            </summary>
            <returns></returns>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.ILemmaCollection.name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.ILemmaCollection.description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.ILemmaCollection.filepath">
            <summary>
            Gets or sets the filepath.
            </summary>
            <value>
            The filepath.
            </value>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.ILemmaCollection.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.ILemmaCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTerm"/> with the specified key.
            </summary>
            <value>
            The <see cref="T:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTerm"/>.
            </value>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="F:imbNLP.PartOfSpeech.TFModels.industryDescriptor.industryTermType.productType">
            <summary>
            The product type: e.g. stove, shelf
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.TFModels.industryDescriptor.industryTermType.productFeature">
            <summary>
            The product feature: e.g. high-voltage, salepoint (furniture)
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.TFModels.industryDescriptor.industryTermType.productFunction">
            <summary>
            The product function: e.g. heating
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.TFModels.industryDescriptor.industryTermType.productConsumable">
            <summary>
            The product consumable: e.g. pelet, fuel
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.TFModels.industryDescriptor.industryTermType.productPart">
            <summary>
            The product part: e.g. tube, radiator, CNC
            </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.industryDescriptor.industryInformation.name">
            <summary> name of the industry </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.industryDescriptor.industryInformation.description">
            <summary> description of the industry </summary>
        </member>
        <member name="T:imbNLP.PartOfSpeech.TFModels.industryLemma.itmConstructorBasic">
            <summary>
            Basic type of constructor that builds IndustryTermModel rank table
            </summary>
            <seealso cref="T:imbNLP.PartOfSpeech.TFModels.industryLemma.core.IIndustryTermModelConstructor" />
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.industryLemma.itmConstructorSettings.PrimaryTermFactor">
            <summary> Ratio </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.industryLemma.itmConstructorSettings.SecondaryTermFactor">
            <summary> Ratio </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.industryLemma.itmConstructorSettings.ReserveTermFactor">
            <summary> Ratio </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.industryLemma.itmConstructorSettings.OtherTermFactor">
            <summary> Ratio </summary>
        </member>
        <member name="T:imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrix">
            <summary>
            Matrix of overlaping temrs in <see cref="T:imbNLP.PartOfSpeech.TFModels.semanticCloud.lemmaSemanticCloud"/>
            </summary>
            <seealso cref="!:imbSCI.Data.collection.nested.aceDictionary2D&lt;imbNLP.PartOfSpeech.TFModels.semanticCloud.lemmaSemanticCloud, imbNLP.PartOfSpeech.TFModels.semanticCloud.lemmaSemanticCloud, System.Collections.Generic.List&lt;imbNLP.PartOfSpeech.TFModels.semanticCloud.core.freeGraphNodeBase&gt;&gt;" />
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrix.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrix"/> class.
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrix.GetCellNumber(imbNLP.PartOfSpeech.TFModels.semanticCloud.lemmaSemanticCloud,imbNLP.PartOfSpeech.TFModels.semanticCloud.lemmaSemanticCloud,imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrixDataTableType,imbSCI.DataComplex.special.instanceCountCollection{System.String})">
            <summary>
            Gets the value for cell targeted
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="type">The type.</param>
            <param name="counter">The counter.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrix.BuildTable(imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrixSettings,imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrixDataTableType)">
            <summary>
            Builds the table.
            </summary>
            <param name="settings">The settings.</param>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrix.ExportTextReports(imbSCI.Core.files.folders.folderNode,System.Boolean,System.String)">
            <summary>
            Exports the text report
            </summary>
            <param name="folder">The folder.</param>
            <param name="reduced">if set to <c>true</c> [reduced].</param>
            <param name="prefix">The prefix.</param>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrix.GetCounter(System.Boolean)">
            <summary>
            Gets the counter.
            </summary>
            <param name="ofCurrentState">if set to <c>true</c> [of current state].</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrix.TransformClouds(imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrixSettings,imbSCI.Core.reporting.ILogBuilder,System.String)">
            <summary>
            Transforms the clouds, related
            </summary>
            <param name="settings">The settings.</param>
            <param name="logger">The logger.</param>
            <param name="reductionReportName">Name of the reduction report.</param>
            <returns>
            Notes about reduced weights
            </returns>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrix.MinCloudFrequency">
            <summary> Lowest cloud frequency among the lemmas </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrix.MaxCloudFrequency">
            <summary> Highest cloud frequency among the lemmas </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrix.MaxOverlap">
            <summary>
            Highest number of overlap nodes between two clouds
            </summary>
            <value>
            The maximum overlap.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrix.MinOverlap">
            <summary>
            Lower number of overlap nodes between two clouds
            </summary>
            <value>
            The minimum overlap.
            </value>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrix.build(System.Collections.Generic.IEnumerable{imbNLP.PartOfSpeech.TFModels.semanticCloud.lemmaSemanticCloud},imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Builds the specified clouds.
            </summary>
            <param name="clouds">The clouds.</param>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrixReductionReport.name">
            <summary> Name for the report </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrixReductionReport.Actions">
            <summary> Total actions - how many actions were taken by the Cloud Matrix </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrixReductionReport.CFFunctionReduction">
            <summary> Number of terms got reduction by CF function </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrixReductionReport.LPFilterReduction">
            <summary> Number of terms got reduction by LP filter </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrixReductionReport.LPFRemovals">
            <summary> Number of terms removed </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrixReductionReport.MWRemovals">
            <summary> Number of terms removed by microweight treshhold </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrixReductionReport.InitialWeight">
            <summary> Ratio </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrixReductionReport.TotalReduction">
            <summary> Ratio </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrixReductionReport.LPFReductionWeight">
            <summary> Ratio </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrixReductionReport.CFReductionWeight">
            <summary> Ratio </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrixReductionReport.Add(System.String,System.String,System.Double,System.Double,imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrixReductionAction)">
            <summary>
            Adds action in the report
            </summary>
            <param name="cloud">The cloud name</param>
            <param name="term">The term being affected.</param>
            <param name="initial">The initial weight.</param>
            <param name="reduced">The reduced weight.</param>
            <param name="action">The action that was taken.</param>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrixReductionReport.GetDataTable">
            <summary>
            Gets the data table, with all actions
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrixReductionReport.ToString">
            <summary>
            Returns complete string report on reductions that were done by the cloud matrix filtration functions
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrixReductionReportEntry">
            <summary>
            Represents single action done by <see cref="T:imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrix"/> filtration functions
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrixReductionReportEntry.ToStringFormat">
            <summary>
            Format used for <see cref="M:imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrixReductionReportEntry.ToString"/>
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrixReductionReportEntry.ToString">
            <summary>
            Returns a formatted <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrixReductionReportEntry.#ctor">
            <summary>
            Never use this constructor, it's for serialization. Use <see cref="M:imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrixReductionReport.Add(System.String,System.String,System.Double,System.Double,imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrixReductionAction)"/> method
            </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrixReductionReportEntry.Cloud">
            <summary> Name of the cloud that owns the term </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrixReductionReportEntry.Term">
            <summary> Term that was affected by reduction </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrixReductionReportEntry.Initial">
            <summary> Ratio </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrixReductionReportEntry.Action">
            <summary> Type of action that was applied </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrixReductionReportEntry.Hash">
            <summary> Hash - used to identify this particular action during report creation </summary>
        </member>
        <member name="T:imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrixSettings">
            <summary>
            Settings for semantic cloud transformation
            </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrixSettings.doRemoveAnyRepeatingPrimaryTerm">
            <summary> If true it will remove any primary term that is found to repeat among clouds </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrixSettings.doDemoteAnyRepeatingSecondaryTerm">
            <summary> If true it will demote secondary term to reserve if found repeating </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrixSettings.lowPassFilter">
            <summary>
            It will pass only terms with less then specified number of clouds found. Max. possible overlap is: n-1, where n is size of square matrix
            </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrixSettings.isActive">
            <summary> If <c>true</c> it will use the semantic cloud matrix for noise removal </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrixSettings.doDivideWeightWithCloudFrequency">
            <summary> If true it divide each term weight with number of common clouds being detected in </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrixSettings.doUseSquareFunctionOfCF">
            <summary> If true it will divide weight with square power of cloud frequency </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrixSettings.doCutOffByCloudFrequency">
            <summary> If true it will remove terms having cloud frequency above specified lowPassFilter value </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrixSettings.isFilterInAdaptiveMode">
            <summary> If true it will automatically adjust lowPassFilter value according to the top edge of cloud frequencies </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrixSettings.doAssignMicroWeightInsteadOfRemoval">
            <summary> If true it assign the microWeightNoiseGate value to term, set to be removed by the filter (this prevents the removal) </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.semanticCloudMatrix.cloudMatrixSettings.microWeightNoiseGate">
            <summary> Weight lower limit for term removal </summary>
        </member>
        <member name="T:imbNLP.PartOfSpeech.TFModels.semanticCloudWeaver.lemmaSemanticWeaver">
            <summary>
            Performs additional node linking, on already constructed <see cref="T:imbNLP.PartOfSpeech.TFModels.semanticCloud.lemmaSemanticCloud"/>
            </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.semanticCloudWeaver.lemmaSemanticWeaver.similarWords">
            <summary>
            Settings for cloud waveing when <see cref="P:imbNLP.PartOfSpeech.TFModels.semanticCloudWeaver.lemmaSemanticWeaver.useSimilarity"/> is on
            </summary>
            <value>
            The similar words.
            </value>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.semanticCloudWeaver.lemmaSemanticWeaver.Process(imbNLP.PartOfSpeech.TFModels.semanticCloud.lemmaSemanticCloud,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Processes the specified cloud.
            </summary>
            <param name="cloud">The cloud.</param>
            <param name="logger">The logger.</param>
            <returns></returns>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.semanticCloudWeaver.lemmaSemanticWeaver.apertiumSettings">
            <summary>
            Settings for <see cref="P:imbNLP.PartOfSpeech.TFModels.semanticCloudWeaver.lemmaSemanticWeaver.apertium"/>
            </summary>
            <value>
            The apertium settings.
            </value>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.semanticCloudWeaver.lemmaSemanticWeaver.prepare(imbSCI.Core.files.folders.folderNode,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Prepares apertium. It is not necessery to call this method, if the weaver is used within <see cref="T:imbACE.Core.application.IAceApplicationBase"/>
            </summary>
            <param name="resourceFolder">The resource folder.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.semanticCloudWeaver.lemmaSemanticWeaver.ToString">
            <summary>
            Returns description on the settings
            </summary>
            <returns></returns>
        </member>
        <member name="T:imbNLP.PartOfSpeech.TFModels.semanticCloudWeaver.lemmaSemanticWeaverResult">
            <summary>
            Reporting purpose result of the weaver's contribution to the cloud improvement
            </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.semanticCloudWeaver.lemmaSemanticWeaverResult.linkRatioInitial">
            <summary>
            Link per node ratio, before <see cref="T:imbNLP.PartOfSpeech.TFModels.semanticCloudWeaver.lemmaSemanticWeaver"/> processed the cloud
            </summary>
            <value>
            The link ratio initial.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.semanticCloudWeaver.lemmaSemanticWeaverResult.linkRatioAfterWS">
            <summary>
            Link per node ratio after <see cref="P:imbNLP.PartOfSpeech.TFModels.semanticCloudWeaver.lemmaSemanticWeaver.similarWords"/> is applied
            </summary>
            <value>
            The link ratio after ws.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.semanticCloudWeaver.lemmaSemanticWeaverResult.linkRatioAfterDS">
            <summary>
            Link per node ratio after <see cref="P:imbNLP.PartOfSpeech.TFModels.semanticCloudWeaver.lemmaSemanticWeaver.apertiumSettings"/> is applied
            </summary>
            <value>
            The link ratio after ds.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.semanticCloudWeaver.lemmaSemanticWeaverResult.cloudClassName">
            <summary>
            Name of the cloud category / class name
            </summary>
            <value>
            The name of the cloud class.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.semanticCloudWeaver.lemmaSemanticWeaverResult.cloud">
            <summary>
            Reference to the cloud being processed
            </summary>
            <value>
            The cloud.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.semanticCloudWeaver.lemmaSemanticWeaverResult.similarWords">
            <summary>
            Results on word similarity
            </summary>
            <value>
            The similar words.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.semanticCloudWeaver.lemmaSemanticWeaverResult.appertiumNotes">
            <summary>
            Gets or sets the appertium notes.
            </summary>
            <value>
            The appertium notes.
            </value>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.semanticCloudWeaver.lemmaSemanticWeaverResult.Save(imbSCI.Core.files.folders.folderNode,System.String)">
            <summary>
            Saves the report into text file in the <c>folder</c>, and returns path of the file
            </summary>
            <param name="folder">The folder to save into</param>
            <param name="filename_sufix">Optional filename suffix to be added after <see cref="P:imbNLP.PartOfSpeech.TFModels.semanticCloudWeaver.lemmaSemanticWeaverResult.cloudClassName"/> </param>
            <returns>Path of the saved file</returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.semanticCloudWeaver.lemmaSemanticWeaverResult.ToString">
            <summary>
            Returns textual description on what was matched
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:imbNLP.PartOfSpeech.TFModels.semanticCloud.cloudConstructor">
            <summary>
            Constructs <see cref="T:imbNLP.PartOfSpeech.TFModels.semanticCloud.lemmaSemanticCloud"/>
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.semanticCloud.cloudConstructor.DescribeSelf">
            <summary>
            Creates multi-line description of current configuration
            </summary>
            <returns>List of description lines</returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.semanticCloud.cloudConstructor.process(imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermTable,imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermTable,imbNLP.PartOfSpeech.TFModels.semanticCloud.lemmaSemanticCloud,imbSCI.Core.reporting.ILogBuilder,System.Collections.Generic.List{imbNLP.PartOfSpeech.pipelineForPos.subject.pipelineTaskMCSiteSubject},imbNLP.PartOfSpeech.resourceProviders.core.ITextResourceResolver)">
            <summary>
            Processes the specified chunk table into semantic cloud
            </summary>
            <param name="chunkTable">The chunk table.</param>
            <param name="termTable">The term table.</param>
            <param name="output">The output.</param>
            <param name="logger">The logger.</param>
            <param name="subjects">The subjects.</param>
            <param name="resolver">The resolver.</param>
            <returns></returns>
            <exception cref="T:imbACE.Core.core.exceptions.aceScienceException">This is stupid. Settings for cloudConstructor have assignChunkTableWeightToLink=true but it will not create new link in case the lemmas are already linked" +
            ", therefore resulting weight is assigned just by chance! Change cloudConstructor settings bro, to make some sense. - null - cloudConstructor has irrational settings</exception>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.semanticCloud.cloudConstructor.processPOSEnhanced(imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermTable,imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermTable,imbNLP.PartOfSpeech.TFModels.semanticCloud.lemmaSemanticCloud,imbSCI.Core.reporting.ILogBuilder,System.Collections.Generic.List{imbNLP.PartOfSpeech.pipelineForPos.subject.pipelineTaskMCSiteSubject},imbNLP.PartOfSpeech.resourceProviders.core.ITextResourceResolver)">
            <summary>
            Processes the position enhanced.
            </summary>
            <param name="chunkTable">The chunk table.</param>
            <param name="termTable">The term table.</param>
            <param name="output">The output.</param>
            <param name="logger">The logger.</param>
            <param name="subjects">The subjects.</param>
            <param name="resolver">The resolver.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.semanticCloud.cloudConstructor.processAlternative(imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermTable,imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermTable,imbNLP.PartOfSpeech.TFModels.semanticCloud.lemmaSemanticCloud,imbSCI.Core.reporting.ILogBuilder,System.Collections.Generic.List{imbNLP.PartOfSpeech.pipelineForPos.subject.pipelineTaskMCSiteSubject},imbNLP.PartOfSpeech.resourceProviders.core.ITextResourceResolver)">
            <summary>
            Processes the complex.
            </summary>
            <param name="chunkTable">The chunk table.</param>
            <param name="termTable">The term table.</param>
            <param name="output">The output.</param>
            <param name="logger">The logger.</param>
            <param name="subjects">The subjects.</param>
            <param name="resolver">The resolver.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.semanticCloud.cloudConstructor.BuildCloud(imbNLP.PartOfSpeech.TFModels.semanticCloud.lemmaSemanticConstruct,imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermTable,imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermTable,imbNLP.PartOfSpeech.TFModels.semanticCloud.lemmaSemanticCloud,imbSCI.Core.reporting.ILogBuilder,imbNLP.PartOfSpeech.resourceProviders.core.ITextResourceResolver)">
            <summary>
            Builds the cloud - common part of the algorithm
            </summary>
            <param name="c">The c.</param>
            <param name="chunkTable">The chunk table.</param>
            <param name="termTable">The term table.</param>
            <param name="output">The output.</param>
            <param name="logger">The logger.</param>
            <param name="resolver">The resolver.</param>
            <returns></returns>
            <exception cref="T:imbACE.Core.core.exceptions.aceScienceException">This is stupid. Settings for cloudConstructor have assignChunkTableWeightToLink=true but it will not create new link in case the lemmas are already linked" +
                                                            ", therefore resulting weight is assigned just by chance! Change cloudConstructor settings bro, to make some sense. - null - cloudConstructor has irrational settings</exception>
        </member>
        <member name="T:imbNLP.PartOfSpeech.TFModels.semanticCloud.cloudConstructorAlgorithm">
            <summary>
            Algorithm used for <see cref="T:imbNLP.PartOfSpeech.TFModels.semanticCloud.lemmaSemanticCloud"/> construction
            </summary>
        </member>
        <member name="T:imbNLP.PartOfSpeech.TFModels.semanticCloud.cloudConstructorSettings">
            <summary>
            Configuration parameters, driving <see cref="T:imbNLP.PartOfSpeech.TFModels.semanticCloud.lemmaSemanticCloud" /> construction
            </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.semanticCloud.cloudConstructorSettings.doAdjustLinkWeightByChunkSize">
            <summary> If <c>true</c> it will reduce link weight when chunk contains more then 2 tokens </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.semanticCloud.cloudConstructorSettings.termInChunkLowerLimit">
            <summary>
            Gets or sets the term in chunk lower limit.
            </summary>
            <value>
            The term in chunk lower limit.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.semanticCloud.cloudConstructorSettings.doFactorToClassClouds">
            <summary> Do apply factors to class clouds </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.semanticCloud.cloudConstructorSettings.doFactorToCaseClouds">
            <summary> If true it will do something </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.semanticCloud.cloudConstructorSettings.doReserveTermsForClass">
            <summary> If true it will build links to the reserve terms </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.semanticCloud.cloudConstructorSettings.documentSetFreqLowLimit">
            <summary>
            Minimal document set frequency required for chunk entry to be included in the semantic cloud
            </summary>
            <value>
            The document set freq low limit.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.semanticCloud.cloudConstructorSettings.doSumExistingLinkWeights">
            <summary>
            In case the link already exists, it will summarize its weight with new link
            </summary>
            <value>
              <c>true</c> if [do sum existing link weights]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:imbNLP.PartOfSpeech.TFModels.semanticCloud.lemmaExpansionOptions">
            <summary>
            Flags controling term expansion
            </summary>
        </member>
        <member name="T:imbNLP.PartOfSpeech.TFModels.semanticCloud.lemmaSemanticCloud">
            <summary>
            Cloud (free graph) containing <see cref="T:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTerm"/> as nodes
            </summary>
            <seealso cref="!:imbNLP.PartOfSpeech.TFModels.semanticCloud.core.freeGraph" />
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.semanticCloud.lemmaSemanticCloud.GetSimpleGraph(System.Boolean)">
            <summary>
            Generates simple-styled graph
            </summary>
            <param name="addLegend">if set to <c>true</c> [add legend].</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.semanticCloud.lemmaSemanticCloud.GetDGMLConverter">
            <summary>
            Gets the DGML converter - with categories defined
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.semanticCloud.lemmaSemanticCloud.GetLinkPerNodeRatio">
            <summary>
            Returns ratio: number of links divided by number of nodes
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.semanticCloud.lemmaSemanticCloud.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbNLP.PartOfSpeech.TFModels.semanticCloud.lemmaSemanticCloud"/> class.
            </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.semanticCloud.lemmaSemanticCloud.className">
            <summary>
            Name of assigned documentSetClass
            </summary>
            <value>
            The name of the class.
            </value>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.semanticCloud.lemmaSemanticCloud.GetWebLemma(imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTerm,imbSCI.Graph.FreeGraph.freeGraphNodeBase,imbNLP.PartOfSpeech.TFModels.semanticCloud.lemmaExpansionOptions)">
            <summary>
            Gets the web lemma.
            </summary>
            <param name="parent">The parent.</param>
            <param name="node">The node.</param>
            <param name="options">The options.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.semanticCloud.lemmaSemanticCloud.GetWebLemmaDictionary(System.Collections.Generic.IEnumerable{imbSCI.Graph.FreeGraph.freeGraphNodeBase})">
            <summary>
            Gets the web lemma dictionary.
            </summary>
            <param name="nodes">The nodes.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.semanticCloud.lemmaSemanticCloud.GetWebLemma(imbSCI.Graph.FreeGraph.freeGraphNodeBase)">
            <summary>
            Converts the graph node into <see cref="T:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTerm"/> instance
            </summary>
            <param name="node">The node.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.semanticCloud.lemmaSemanticCloud.ResolveLemmaForTerm(System.String,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Resolves the lemma for term.
            </summary>
            <param name="nominalForm">The nominal form.</param>
            <param name="logger">The logger.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.semanticCloud.lemmaSemanticCloud.ExpandTermsToCloud(System.Collections.Generic.IEnumerable{imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTerm},System.Int32,System.Boolean,imbNLP.PartOfSpeech.TFModels.semanticCloud.lemmaExpansionOptions)">
            <summary>
            Creates a semantic cloud subset by expanding received lemmas by specified expansionSteps and lemmaExpansionOptions
            </summary>
            <param name="lemmas">The lemmas.</param>
            <param name="expansionSteps">The expansion steps.</param>
            <param name="typeToMin">if set to <c>true</c> [type to minimum].</param>
            <param name="options">The options.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.semanticCloud.lemmaSemanticCloud.GetSSRM(imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermPairCollection,imbSCI.Core.reporting.ILogBuilder,imbNLP.PartOfSpeech.TFModels.semanticCloud.SSRMComputation)">
            <summary>
            Gets the SSRM - computes the SSRM Similarity
            </summary>
            <param name="lemmas">The lemmas.</param>
            <param name="logger">The logger.</param>
            <param name="debug">The debug.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.semanticCloud.lemmaSemanticCloud.ExpandTermsToCloud(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Boolean,imbNLP.PartOfSpeech.TFModels.semanticCloud.lemmaExpansionOptions)">
            <summary>
            Returns expanded cloud from given lemma list - only for matched lemmas
            </summary>
            <param name="lemmas">The lemmas.</param>
            <param name="expansionSteps">The expansion steps.</param>
            <param name="options">The options.</param>
            <param name="typeToMin">todo: describe typeToMin parameter on ExpandTermsToCloud</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.semanticCloud.lemmaSemanticCloud.ExpandTerms(System.Collections.Generic.IEnumerable{imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTerm},System.Int32,imbNLP.PartOfSpeech.TFModels.semanticCloud.lemmaExpansionOptions)">
            <summary>
            Expands the terms.
            </summary>
            <param name="lemmas">The lemmas.</param>
            <param name="expansionSteps">The expansion steps.</param>
            <param name="options">The options.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.semanticCloud.lemmaSemanticCloud.GetMatchingTerms(System.Collections.Generic.IEnumerable{imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTerm},System.Boolean,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Gets the matching terms against list of nodes.
            </summary>
            <param name="lemmas">The lemmas.</param>
            <param name="reverse">if set to <c>true</c> [reverse].</param>
            <param name="loger">The loger.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.semanticCloud.lemmaSemanticCloud.OnBeforeSave(imbSCI.Core.files.folders.folderNode)">
            <summary>
            Does nothing (by default implementation) -- should be called before saving to xml
            </summary>
            <param name="folder">The folder.</param>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.semanticCloud.lemmaSemanticCloud.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.semanticCloud.lemmaSemanticCloud.filepath">
            <summary>
            Gets or sets the filepath.
            </summary>
            <value>
            The filepath.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.semanticCloud.lemmaSemanticCloud.Item(System.String)">
            <summary>
            Gets the <see cref="T:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTerm"/> with the specified key.
            </summary>
            <value>
            The <see cref="T:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTerm"/>.
            </value>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.semanticCloud.lemmaSemanticCloud.RebuildIndex">
            <summary>
            Rebuilds the index.
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.semanticCloud.lemmaSemanticCloud.ResolveSingleTerm(System.String,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Use this method instead of <see cref="M:imbNLP.PartOfSpeech.TFModels.semanticCloud.lemmaSemanticCloud.ResolveSingleTerm(System.String,imbSCI.Core.reporting.ILogBuilder)"/>
            </summary>
            <param name="term">The term.</param>
            <param name="logger">The logger.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.semanticCloud.lemmaSemanticCloud.Add(imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTerm)">
            <summary>
            Adds lemma and sets its weight to the newly created node
            </summary>
            <param name="term">The term.</param>
        </member>
        <member name="T:imbNLP.PartOfSpeech.TFModels.semanticCloud.lemmaSemanticConstruct">
            <summary>
            Temporary object used for easier modification of cloud construction algorithm
            </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.semanticCloud.lemmaSemanticConstruct.primaryChunks">
            <summary>
            Lemma form of primary chunks
            </summary>
            <value>
            The primary chunks.
            </value>
        </member>
        <member name="T:imbNLP.PartOfSpeech.TFModels.semanticCloud.SSRMComputation">
            <summary>
            Diagnostic SSRM computation artifact
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.semanticCloud.SSRMComputation.printTerm(System.Int32,System.String,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Prints the term.
            </summary>
            <param name="i">The i.</param>
            <param name="term">The term.</param>
            <param name="w_d">The w d.</param>
            <param name="w_t">The w t.</param>
            <param name="w_c">The w c.</param>
            <param name="up">Up.</param>
            <param name="lw">The lw.</param>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.similarityKernels.ISimilarityKernel.kernelName">
            <summary>
            Gets the name of the kernel.
            </summary>
            <value>
            The name of the kernel.
            </value>
        </member>
        <member name="T:imbNLP.PartOfSpeech.TFModels.similarityKernels.kernelManager">
            <summary>
            Helper class that provides term weight computation kernels
            </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.similarityKernels.kernelManager.registry">
            <summary>
            static and autoinitiated object
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.similarityKernels.kernelManager.RegisterKernel(System.Type)">
            <summary>
            Registers the specified kernel type
            </summary>
            <param name="kernelType">Type of the kernel.</param>
            <exception cref="T:System.ArgumentException">
            Kernel Type must have parameterless constructor! - kernelType
            or
            Kernel Type must implement ITermWeightKernel interface! - kernelType
            </exception>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.similarityKernels.kernelManager.GetKernel(System.String)">
            <summary>
            Gets kernel instance for specified kernel name. If kernel not recognized it returns default: <see cref="!:kernelTFcIDF"/>
            </summary>
            <param name="kernelName">Name of the kernel.</param>
            <returns></returns>
        </member>
        <member name="T:imbNLP.PartOfSpeech.TFModels.vectorSpace.ISpaceModelEntity">
            <summary>
            An entity, that can be part of the <see cref="T:imbNLP.PartOfSpeech.TFModels.vectorSpace.spaceModel"/>
            </summary>
        </member>
        <member name="T:imbNLP.PartOfSpeech.TFModels.vectorSpace.spaceModel">
            <summary>
            Describes associations between entities in the model, e.g. <see cref="!:SpaceTopic"/>-<see cref="!:SpaceDocumentModel"/> and similar.
            </summary>
        </member>
        <member name="T:imbNLP.PartOfSpeech.TFModels.vectorSpace.spaceModelRelation">
            <summary>
            Describes single entry on relationship between two entities in a <see cref="T:imbNLP.PartOfSpeech.TFModels.vectorSpace.spaceModel"/>. Relation has direction from A to B. Described by: Value, RelationshipType and optional data
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.vectorSpace.spaceModelRelation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbNLP.PartOfSpeech.TFModels.vectorSpace.spaceModelRelation"/> class.
            </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.vectorSpace.spaceModelRelation.EntityAType">
            <summary>
            Typed access to the Entity A type
            </summary>
            <value>
            The type of the entity a.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.vectorSpace.spaceModelRelation.EntityBType">
            <summary>
            Typed access to the Entity B type
            </summary>
            <value>
            The type of the entity B.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.vectorSpace.spaceModelRelation.EntityATypeVal">
            <summary>
            Gets or sets the type of the entity a.
            </summary>
            <value>
            The type of the entity a.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.vectorSpace.spaceModelRelation.EntityA">
            <summary>
            Unique (local) identification of the entity A
            </summary>
            <value>
            The unique ID of entity A, in its local vector space (network, graph...)
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.vectorSpace.spaceModelRelation.Value">
            <summary>
            Value stored for the relationship
            </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.vectorSpace.spaceModelRelation.RelationshipType">
            <summary>
            Integer flag that describes the nature of the relationship
            </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.vectorSpace.spaceModelRelation.Data">
            <summary>
            Additional data stored in the relationship.
            </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.vectorSpace.spaceModelRelation.EntityB">
            <summary>
            Unique (local) identification of the entity B
            </summary>
            <value>
            The unique ID of entity A, in its local vector space (network, graph...)
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.vectorSpace.spaceModelRelation.EntityBTypeVal">
            <summary>
            Gets or sets the type of the entity b.
            </summary>
            <value>
            The type of the entity b.
            </value>
        </member>
        <member name="T:imbNLP.PartOfSpeech.TFModels.vectorSpace.spaceModelRelationList">
            <summary>
            Passive list of relationships, defined at an entity
            </summary>
            <seealso cref="!:System.Collections.Generic.List&lt;imbNLP.PartOfSpeech.TFModels.vectorSpace.spaceModelRelation&gt;" />
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.vectorSpace.spaceModelRelationList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbNLP.PartOfSpeech.TFModels.vectorSpace.spaceModelRelationList"/> class.
            </summary>
        </member>
        <member name="T:imbNLP.PartOfSpeech.TFModels.vectorSpace.spaceModelRelationEntityType">
            <summary>
            Enumeration of entity types that are anticipated by <see cref="T:imbNLP.PartOfSpeech.TFModels.vectorSpace.spaceModelRelation"/>
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.TFModels.vectorSpace.spaceModelRelationEntityType.self">
            <summary>
            Local reference, pointing to an entity that hosts the <see cref="T:imbNLP.PartOfSpeech.TFModels.vectorSpace.spaceModelRelationList"/>
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.TFModels.vectorSpace.spaceModelRelationEntityType.Term">
            <summary>
            Term - basic content unit in space vector model
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.TFModels.vectorSpace.spaceModelRelationEntityType.Phrase">
            <summary>
            e.g. N-gram, sequence or other sub-Document representation model element
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.TFModels.vectorSpace.spaceModelRelationEntityType.Document">
            <summary>
            e.g. Web page or text document
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.TFModels.vectorSpace.spaceModelRelationEntityType.DocumentSet">
            <summary>
            e.g. Web site or other collection of <see cref="F:imbNLP.PartOfSpeech.TFModels.vectorSpace.spaceModelRelationEntityType.Document"/>s that is single instance in classification
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.TFModels.vectorSpace.spaceModelRelationEntityType.Label">
            <summary>
            e.g. Category or human supplied tag
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.TFModels.vectorSpace.spaceModelRelationEntityType.Topic">
            <summary>
            e.g. Latent topics, extracted by Latent Semantic Analysis or LDA
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.TFModels.vectorSpace.spaceModelRelationEntityType.Dimension">
            <summary>
            e.g. additional dimension/score/measure, attached to the item
            </summary>
        </member>
        <member name="T:imbNLP.PartOfSpeech.TFModels.webLemma.chunkConstructorTF">
            <summary>
            Chunk Frequency Table constructor
            </summary>
            <seealso cref="T:imbNLP.PartOfSpeech.TFModels.webLemma.core.IWLFConstructor" />
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.webLemma.chunkConstructorTF.DescribeSelf">
            <summary>
            Creates multi-line description of current configuration
            </summary>
            <returns>List of description lines</returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.webLemma.chunkConstructorTF.process(System.Collections.Generic.IEnumerable{imbNLP.PartOfSpeech.pipeline.machine.IPipelineTaskSubject},imbNLP.PartOfSpeech.flags.token.cnt_level,imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermTable,imbNLP.PartOfSpeech.resourceProviders.core.ITextResourceResolver,imbSCI.Core.reporting.ILogBuilder,System.Boolean)">
            <summary>
            Processes the specified source.
            </summary>
            <param name="chunks">The source.</param>
            <param name="document_level">The document level.</param>
            <param name="table">The table.</param>
            <param name="parser">The parser.</param>
            <param name="logger">The logger.</param>
            <param name="forSingleWebSite">if set to <c>true</c> [for single web site].</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.webLemma.chunkConstructorTF.process(imbSCI.DataComplex.tf_idf.TFDFCounter,imbSCI.Core.reporting.ILogBuilder,imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermTable,System.Boolean)">
            <summary>
            Constructs the webLemmaTable
            </summary>
            <param name="counter">The counter.</param>
            <param name="logger">The logger.</param>
            <param name="table">The table.</param>
            <param name="forSingleWebSite">if set to <c>true</c> [for single web site].</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.webLemma.ConstructorTFIDFBase.DescribeSelf">
            <summary>
            Creates multi-line description of current configuration
            </summary>
            <returns>List of description lines</returns>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.webLemma.ConstructorTFIDFBase.weightKernelName">
            <summary>
            Name of the kernel engine to be used for weight computation
            </summary>
            <value>
            The name of the weight kernel.
            </value>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.webLemma.ConstructorTFIDFBase.recompute(imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermTable,imbSCI.Core.reporting.ILogBuilder,System.Boolean,System.Collections.Generic.List{imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTerm})">
            <summary>
            Recomputes the specified table.
            </summary>
            <param name="table">The table.</param>
            <param name="logger">The logger.</param>
            <param name="forSingleWebSite">if set to <c>true</c> [for single web site].</param>
            <param name="lemmas">The lemmas.</param>
            <returns></returns>
            <exception cref="T:imbACE.Core.core.exceptions.aceGeneralException">Permanent Add() lemma problem at [" + table.name + "] - Permanent Lemma TF-IDF Add(Lemma) failure</exception>
        </member>
        <member name="T:imbNLP.PartOfSpeech.TFModels.webLemma.core.IWLFConstructor">
            <summary>
            A constructor for Web Lemma Term Table
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.webLemma.core.IWLFConstructor.DescribeSelf">
            <summary>
            Describes self in multiple lines. Description contains the most important settings and way of operation
            </summary>
            <returns></returns>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.webLemma.kernels.ITermWeightKernel.kernelName">
            <summary>
            Gets the name of the kernel.
            </summary>
            <value>
            The name of the kernel.
            </value>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.webLemma.kernels.ITermWeightKernel.compute(imbNLP.PartOfSpeech.TFModels.webLemma.kernels.kernelComputeWeightTask)">
            <summary>
            Compute and sets weight to all lemmas in the <see cref="P:imbNLP.PartOfSpeech.TFModels.webLemma.kernels.kernelComputeWeightTask.lemmas"/>
            </summary>
            <param name="task">The task.</param>
            <returns></returns>
        </member>
        <member name="T:imbNLP.PartOfSpeech.TFModels.webLemma.kernels.kernelComputeWeightTask">
            <summary>
            Temporary data used by weight computation kernel
            </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.webLemma.kernels.kernelComputeWeightTask.documentSetFrequencyMax">
            <summary>
            Highest document set frequency
            </summary>
            <value>
            The document set frequency maximum.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.webLemma.kernels.kernelComputeWeightTask.documentFrequencyMax">
            <summary>
            Highest document frequency
            </summary>
            <value>
            The document frequency maximum.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.webLemma.kernels.kernelComputeWeightTask.termFrequencyMax">
            <summary>
            Highest term frequency
            </summary>
            <value>
            The term frequency maximum.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.webLemma.kernels.kernelComputeWeightTask.termFrequencyTotal">
            <summary>
            Sum of all term frequencies, i.e. total number of words processed
            </summary>
            <value>
            The term frequency total.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.webLemma.kernels.kernelComputeWeightTask.termCount">
            <summary>
            Total number of distinct terms
            </summary>
            <value>
            The term count.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.webLemma.kernels.kernelComputeWeightTask.weightMax">
            <summary>
            Max. weight before normalizatipon
            </summary>
            <value>
            The weight maximum.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.webLemma.kernels.kernelComputeWeightTask.lemmas">
            <summary>
            Lemmas sent to weight computation kernel
            </summary>
            <value>
            The lemmas.
            </value>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.webLemma.kernels.kernelComputeWeightTask.#ctor(System.Collections.Generic.List{imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTerm},imbSCI.Core.reporting.ILogBuilder,System.Boolean,imbNLP.PartOfSpeech.TFModels.webLemma.wlfConstructorSettings)">
            <summary>
            Prepares weight computation task for lemmas provided
            </summary>
            <param name="_lemmas">The lemmas.</param>
        </member>
        <member name="T:imbNLP.PartOfSpeech.TFModels.webLemma.kernels.kernelManager">
            <summary>
            Helper class that provides term weight computation kernels
            </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.webLemma.kernels.kernelManager.registry">
            <summary>
            static and autoinitiated object
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.webLemma.kernels.kernelManager.RegisterKernel(System.Type)">
            <summary>
            Registers the specified kernel type
            </summary>
            <param name="kernelType">Type of the kernel.</param>
            <exception cref="T:System.ArgumentException">
            Kernel Type must have parameterless constructor! - kernelType
            or
            Kernel Type must implement ITermWeightKernel interface! - kernelType
            </exception>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.webLemma.kernels.kernelManager.GetKernel(System.String)">
            <summary>
            Gets kernel instance for specified kernel name. If kernel not recognized it returns default: <see cref="T:imbNLP.PartOfSpeech.TFModels.webLemma.kernels.kernelTFcIDF"/>
            </summary>
            <param name="kernelName">Name of the kernel.</param>
            <returns></returns>
        </member>
        <member name="T:imbNLP.PartOfSpeech.TFModels.webLemma.kernels.kernelTFcIDF">
            <summary>
            Default Term weight kernel, proposed by BEC research
            </summary>
            <seealso cref="T:imbNLP.PartOfSpeech.TFModels.webLemma.kernels.ITermWeightKernel" />
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.webLemma.kernels.kernelTFcIDF.compute(imbNLP.PartOfSpeech.TFModels.webLemma.kernels.kernelComputeWeightTask)">
            <summary>
            Computes the specified task.
            </summary>
            <param name="task">The task.</param>
            <returns></returns>
        </member>
        <member name="T:imbNLP.PartOfSpeech.TFModels.webLemma.streamConstructorTF">
            <summary>
            Constructs <see cref="T:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermTable"/> for streams
            </summary>
            <seealso cref="T:imbNLP.PartOfSpeech.TFModels.webLemma.ConstructorTFIDFBase" />
            <seealso cref="T:imbNLP.PartOfSpeech.TFModels.webLemma.core.IWLFConstructor" />
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.webLemma.streamConstructorTF.DescribeSelf">
            <summary>
            Creates multi-line description of current configuration
            </summary>
            <returns>List of description lines</returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.webLemma.streamConstructorTF.prepareCounter(System.Collections.Generic.IEnumerable{imbNLP.PartOfSpeech.pipeline.machine.IPipelineTaskSubject})">
            <summary>
            Prepares the counter.
            </summary>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.webLemma.streamConstructorTF.process(System.Collections.Generic.IEnumerable{imbNLP.PartOfSpeech.pipeline.machine.IPipelineTaskSubject},imbNLP.PartOfSpeech.flags.token.cnt_level,imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermTable,imbNLP.PartOfSpeech.resourceProviders.core.ITextResourceResolver,imbSCI.Core.reporting.ILogBuilder,System.Boolean,imbSCI.DataComplex.tf_idf.TFDFCounter)">
            <summary>
            Processes the specified source.
            </summary>
            <param name="source">The source.</param>
            <param name="document_level">The document level.</param>
            <param name="table">The table.</param>
            <param name="parser">The parser.</param>
            <param name="logger">The logger.</param>
            <param name="forSingleWebSite">if set to <c>true</c> [for single web site].</param>
            <param name="counter">The counter.</param>
            <returns></returns>
        </member>
        <member name="T:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTerm">
            <summary>
            Lemma term - atomic unit of tokenized content
            </summary>
            <seealso cref="T:imbMiningContext.TFModels.core.termLemmaBase" />
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTerm.relationList">
            <summary>
            List of additional relationships
            </summary>
            <value>
            The relation list.
            </value>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTerm.GetAbsoluteClone">
            <summary>
            Gets a clone with same absolute frequencies, nominalForm, and other forms
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTerm.AddAbsoluteValues(imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTerm)">
            <summary>
            Sums absolute values (abs. frequency, document frequency and document set frequency)
            </summary>
            <param name="b">The b.</param>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTerm.documentSetFrequency">
            <summary> Ratio </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTerm.documentFactor">
            <summary>
            IDF factor for weight
            </summary>
            <value>
            The factor.
            </value>
        </member>
        <member name="T:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermExtensions">
            <summary>
            Extension methods for <see cref="T:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermTable"/>
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermExtensions.GetLemmasInStringSorted(imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermTable,System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            Gets the lemmas, matching <c>queryTerms</c>, sorted by weight (in the <c>table</c>)
            </summary>
            <param name="table">webLemmaTermTable to be queried</param>
            <param name="queryTerms">The query terms, strings to query <c>table</c></param>
            <param name="takeTopN">Number of top ranked lemmas, by <see cref="P:imbMiningContext.TFModels.core.termLemmaBase.weight"/>, descending.</param>
            <returns>List of matched webLemmaTerms</returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermExtensions.GetLemmasSorted(imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermTable,System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            Gets the lemmas, matching <c>queryTerms</c>, sorted by weight (in the <c>table</c>)
            </summary>
            <param name="table">webLemmaTermTable to be queried</param>
            <param name="queryTerms">The query terms, strings to query <c>table</c></param>
            <param name="takeTopN">Number of top ranked lemmas, by <see cref="P:imbMiningContext.TFModels.core.termLemmaBase.weight"/>, descending.</param>
            <returns>List of matched webLemmaTerms</returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermExtensions.RecomputeTermFrequencies(System.Collections.Generic.IEnumerable{imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTerm},imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Recomputes the term frequencies.
            </summary>
            <param name="lemmas">The lemmas.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermExtensions.GetMergedLemmaTable(System.Collections.Generic.List{imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermTable},System.String,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Merges web lemma term tables into single table that should be recomputed afterwards because only absolute values are set for the lemmas
            </summary>
            <param name="tables">The tables.</param>
            <param name="name">The name.</param>
            <param name="logger">The logger.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermExtensions.GetDataTableSorted(imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermTable,System.Int32)">
            <summary>
            Gets the data table sorted.
            </summary>
            <param name="table">The table.</param>
            <param name="limit">The limit.</param>
            <returns></returns>
        </member>
        <member name="T:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermPackage">
            <summary>
            Package used to store web lemmas just before serialization. Used only as storage
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermPackage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermPackage"/> class.
            </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermPackage.lemmas">
            <summary>
            List with stored lemmas
            </summary>
            <value>
            The lemmas.
            </value>
        </member>
        <member name="T:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermPair">
            <summary>
            Pair of <see cref="T:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTerm"/> instances, representing the same lemma (word) from different contexts
            </summary>
        </member>
        <member name="T:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermPairCollection">
            <summary>
            Set of matched <see cref="T:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTerm"/>s
            </summary>
            <seealso cref="!:System.Collections.Generic.List&lt;imbMiningContext.TFModels.WLF_ISF.webLemmaTermPair&gt;" />
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermPairCollection.GetDataTable">
            <summary>
            Gets the data table with complete pair collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermPairCollection.GetCosineSimilarity(imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Gets the cosine similarity for contained pairs collection
            </summary>
            <param name="logger">The logger.</param>
            <returns></returns>
        </member>
        <member name="T:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermTable">
            <summary>
            Precompiled web lemma term table, ready for saving and application
            </summary>
            <seealso cref="!:imbSCI.DataComplex.tables.objectTable&lt;imbMiningContext.TFModels.WLF_ISF.webLemmaTerm&gt;" />
        </member>
        <member name="F:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermTable.NumberOfRetry">
            <summary>
            The number of retries for loading and saving
            </summary>
        </member>
        <member name="F:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermTable.RetryDelay">
            <summary>
            The retry delay
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermTable.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermTable"/> class.
            </summary>
            <param name="_name">The name.</param>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermTable.#ctor(System.String,System.String,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermTable"/> class.
            </summary>
            <param name="__filepath">The filepath.</param>
            <param name="_name">The name.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermTable.Add(imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTerm)">
            <summary>
            Adds the specified term.
            </summary>
            <param name="term">The term.</param>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermTable.unresolved">
            <summary>
            Temporary storage of unresolved tokens
            </summary>
            <value>
            The unresolved.
            </value>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermTable.Load(System.String,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Loads the specified filepath.
            </summary>
            <param name="__filepath">The filepath.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermTable.GetList">
            <summary>
            Gets the list.
            </summary>
            <returns></returns>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermTable.filepath">
            <summary>
            File path with the package
            </summary>
            <value>
            The filepath.
            </value>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermTable.Save(System.String,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Saves the specified filepath.
            </summary>
            <param name="__filepath">The filepath.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermTable.GetMatchingTerms(imbNLP.PartOfSpeech.TFModels.ILemmaCollection,System.Boolean,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Gets lemmas that are common between this and specified <c>tableB</c>
            </summary>
            <param name="tableB">The table b.</param>
            <param name="logger">The logger.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermTable.ResolveLemmaForTerm(System.String,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Indexed approach to lemmas
            </summary>
            <param name="term">The term.</param>
            <param name="logger">The logger.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermTable.ResolveSingleTerm(System.String,imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Resolves single term - returns weight for lemma of this term
            </summary>
            <param name="term">The term.</param>
            <param name="logger">The logger.</param>
            <returns></returns>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermTable.Item(System.String)">
            <summary>
            Gets the <see cref="T:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTerm"/> with the specified key.
            </summary>
            <value>
            The <see cref="T:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTerm"/>.
            </value>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermTable.GetDataTable">
            <summary>
            Gets the data table.
            </summary>
            <returns></returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermTable.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An enumerator that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermTable.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermTableSufix">
            <summary>
            Additional meta info on the lemma table
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermTableSufix.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermTableSufix"/> class.
            </summary>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermTableSufix.recountMinMax(System.Collections.Generic.List{imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTerm},imbSCI.Core.reporting.ILogBuilder)">
            <summary>
            Recounts the minimum maximum.
            </summary>
            <param name="lemmas">The lemmas.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.webLemma.wlfConstructorSettings.DescribeSelf">
            <summary>
            Creates multi-line description of current configuration
            </summary>
            <returns>List of description lines</returns>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.webLemma.wlfConstructorSettings.doUseDocumentSet">
            <summary> If <c>true</c> it will use documentSet frequency to boost weights of terms that are common to the complete category </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.webLemma.wlfConstructorSettings.strictPosTypePolicy">
            <summary>
            If true it will exclude any POS type that may be anything other then <see cref="P:imbNLP.PartOfSpeech.TFModels.webLemma.wlfConstructorSettings.allowedLemmaTypes"/>
            </summary>
            <value>
              <c>true</c> if [strict position type policy]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.webLemma.wlfConstructorSettings.doAdjustIDFForCase">
            <summary> If true it will adjust IDF computation also for DocumentSetCase </summary>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.webLemma.wlfConstructorSettings.documentFrequencyMaxFactor">
            <summary>
            Factor to multiply max. DF in IDF calculation
            </summary>
            <value>
            The document frequency maximum factor.
            </value>
        </member>
        <member name="P:imbNLP.PartOfSpeech.TFModels.webLemma.wlfConstructorSettings.documentFrequencyMaxCorrection">
            <summary>
            Absolute correction to max. df in IDF calculation
            </summary>
            <value>
            The document frequency maximum correction.
            </value>
        </member>
        <member name="T:imbNLP.PartOfSpeech.TFModels.webLemma.wlfConstructorTFIDF">
             <summary>
            
             </summary>
             <seealso cref="T:imbNLP.PartOfSpeech.TFModels.webLemma.core.IWLFConstructor" />
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.webLemma.wlfConstructorTFIDF.DescribeSelf">
            <summary>
            Creates multi-line description of current configuration
            </summary>
            <returns>List of description lines</returns>
        </member>
        <member name="M:imbNLP.PartOfSpeech.TFModels.webLemma.wlfConstructorTFIDF.process(System.String,imbNLP.PartOfSpeech.resourceProviders.core.ITextResourceResolver,imbSCI.DataComplex.tf_idf.TFDFCounter,imbSCI.Core.reporting.ILogBuilder,imbNLP.PartOfSpeech.TFModels.webLemma.table.webLemmaTermTable,System.Boolean)">
            <summary>
            Constructs the webLemmaTable
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="parser">The parser.</param>
            <param name="counter">The counter.</param>
            <param name="logger">The logger.</param>
            <returns></returns>
        </member>
    </members>
</doc>
